{
	"info": {
		"_postman_id": "ad60e4be-a91d-41d7-a648-1224b69168e8",
		"name": "SpotABirdApp",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44789862"
	},
	"item": [
		{
			"name": "Get All families",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ===== GET ALL FAMILIES TESTS =====\r",
							"\r",
							"// 1. Basic response validation\r",
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has JSON content type\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"});\r",
							"\r",
							"// 2. Response structure validation\r",
							"pm.test(\"Response returns an array of bird families\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    pm.expect(responseData.length).to.be.greaterThan(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Each family has id and name fields\", function () {\r",
							"    const families = pm.response.json();\r",
							"    \r",
							"    families.forEach((family, index) => {\r",
							"        pm.expect(family, `Family at index ${index}`).to.be.an('object');\r",
							"        pm.expect(family, `Family at index ${index}`).to.have.property('id');\r",
							"        pm.expect(family, `Family at index ${index}`).to.have.property('name');\r",
							"        pm.expect(family.id, `Family at index ${index}`).to.be.a('number');\r",
							"        pm.expect(family.name, `Family at index ${index}`).to.be.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"// 3. Data quality checks\r",
							"pm.test(\"Family IDs are positive numbers\", function () {\r",
							"    const families = pm.response.json();\r",
							"    \r",
							"    families.forEach((family, index) => {\r",
							"        pm.expect(family.id, `Family at index ${index}`).to.be.greaterThan(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Family names are not empty\", function () {\r",
							"    const families = pm.response.json();\r",
							"    \r",
							"    families.forEach((family, index) => {\r",
							"        pm.expect(family.name, `Family at index ${index}`).to.have.lengthOf.at.least(1);\r",
							"        pm.expect(family.name.trim(), `Family at index ${index}`).to.not.be.empty;\r",
							"    });\r",
							"});\r",
							"\r",
							"// 4. Performance test\r",
							"pm.test(\"Response time under 2 seconds\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// 5. Store first family for potential future tests\r",
							"pm.test(\"Store first family data for reference\", function () {\r",
							"    const families = pm.response.json();\r",
							"    if (families.length > 0) {\r",
							"        const firstFamily = families[0];\r",
							"        pm.environment.set(\"first_family_id\", firstFamily.id);\r",
							"        pm.environment.set(\"first_family_name\", firstFamily.name);\r",
							"        console.log(\"First family ID:\", firstFamily.id, \"Name:\", firstFamily.name);\r",
							"    }\r",
							"});\r",
							"\r",
							"// 6. Check for specific known families\r",
							"pm.test(\"Contains common bird families\", function () {\r",
							"    const families = pm.response.json();\r",
							"    const familyNames = families.map(family => family.name);\r",
							"    \r",
							"    // Check for some common bird families that should exist\r",
							"    const commonFamilies = [\"Accipitridae\", \"Anatidae\", \"Paridae\", \"Turdidae\"];\r",
							"    \r",
							"    commonFamilies.forEach(familyName => {\r",
							"        pm.expect(familyNames).to.include(familyName);\r",
							"    });\r",
							"});\r",
							"\r",
							"// 7. Unique ID validation\r",
							"pm.test(\"No duplicate family IDs\", function () {\r",
							"    const families = pm.response.json();\r",
							"    const familyIds = families.map(family => family.id);\r",
							"    const uniqueIds = [...new Set(familyIds)];\r",
							"    \r",
							"    pm.expect(familyIds.length).to.equal(uniqueIds.length);\r",
							"});\r",
							"\r",
							"// 8. Validate response structure matches example\r",
							"pm.test(\"Response matches expected structure\", function () {\r",
							"    const families = pm.response.json();\r",
							"    const firstFamily = families[0];\r",
							"    \r",
							"    // Should have exactly these two properties\r",
							"    const expectedProperties = [\"id\", \"name\"];\r",
							"    const actualProperties = Object.keys(firstFamily);\r",
							"    \r",
							"    pm.expect(actualProperties).to.have.members(expectedProperties);\r",
							"    pm.expect(actualProperties.length).to.equal(expectedProperties.length);\r",
							"});\r",
							"\r",
							"// 9. Data type validation\r",
							"pm.test(\"All fields have correct data types\", function () {\r",
							"    const families = pm.response.json();\r",
							"    \r",
							"    families.forEach((family, index) => {\r",
							"        pm.expect(family.id, `Family ID at index ${index}`).to.be.a('number');\r",
							"        pm.expect(family.name, `Family name at index ${index}`).to.be.a('string');\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/families",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"families"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST save a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ===== USER CREATION TESTS =====\r",
							"\r",
							"// 1. Basic response validation\r",
							"pm.test(\"Status code is 200 Created\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has JSON content type\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"});\r",
							"\r",
							"// 2. Response structure validation\r",
							"pm.test(\"Response contains user data with ID\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData.id).to.be.a('number');\r",
							"    pm.expect(responseData.id).to.be.greaterThan(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains all required user fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.have.property('username');\r",
							"    pm.expect(responseData).to.have.property('email');\r",
							"    pm.expect(responseData).to.have.property('firstname');\r",
							"    pm.expect(responseData).to.have.property('lastname');\r",
							"    pm.expect(responseData).to.have.property('role');\r",
							"    pm.expect(responseData).to.have.property('isActive');\r",
							"});\r",
							"\r",
							"// 3. Data consistency check\r",
							"pm.test(\"Response matches request data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const requestData = JSON.parse(pm.request.body.raw);\r",
							"    \r",
							"    pm.expect(responseData.username).to.eql(requestData.username);\r",
							"    pm.expect(responseData.email).to.eql(requestData.email);\r",
							"    pm.expect(responseData.firstname).to.eql(requestData.firstname);\r",
							"    pm.expect(responseData.lastname).to.eql(requestData.lastname);\r",
							"    pm.expect(responseData.role).to.eql(requestData.role);\r",
							"    pm.expect(responseData.isActive).to.eql(requestData.isActive);\r",
							"});\r",
							"\r",
							"// 4. Store created user ID for future tests\r",
							"pm.test(\"Store created user ID for cleanup\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.environment.set(\"created_user_id\", responseData.id);\r",
							"    pm.environment.set(\"created_username\", responseData.username);\r",
							"    console.log(\"Created user ID:\", responseData.id);\r",
							"});\r",
							"\r",
							"// 5. Profile details validation (if included in response)\r",
							"pm.test(\"Profile details are processed\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    // If your response includes profile details, test them\r",
							"    if (responseData.profileDetails) {\r",
							"        pm.expect(responseData.profileDetails).to.have.property('dateOfBirth');\r",
							"        pm.expect(responseData.profileDetails).to.have.property('gender');\r",
							"    }\r",
							"});\r",
							"\r",
							"// 6. Security check - no password in response\r",
							"pm.test(\"Password not exposed in response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.not.have.property('password');\r",
							"});\r",
							"\r",
							"// 7. Response time performance\r",
							"pm.test(\"Response time under 3 seconds\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"ludia\",\r\n    \"password\": \"12345\",\r\n    \"email\": \"ludia@email.com\",\r\n    \"firstname\": \"ludia\",\r\n    \"lastname\": \"ludia\",\r\n    \"role\": \"ADMIN\",\r\n    \"isActive\": true,\r\n    \"profileDetailsInsertDTO\": {\r\n        \"dateOfBirth\": \"1984-11-19\",\r\n        \"gender\": \"FEMALE\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/users/save",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users",
						"save"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST save a spotter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ===== USER CREATION TESTS =====\r",
							"\r",
							"// 1. Basic response validation\r",
							"pm.test(\"Status code is 200 Created\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has JSON content type\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"});\r",
							"\r",
							"// 2. Response structure validation\r",
							"pm.test(\"Response contains user data with ID\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData.id).to.be.a('number');\r",
							"    pm.expect(responseData.id).to.be.greaterThan(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains all required user fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.have.property('username');\r",
							"    pm.expect(responseData).to.have.property('email');\r",
							"    pm.expect(responseData).to.have.property('firstname');\r",
							"    pm.expect(responseData).to.have.property('lastname');\r",
							"    pm.expect(responseData).to.have.property('role');\r",
							"    pm.expect(responseData).to.have.property('isActive');\r",
							"});\r",
							"\r",
							"// 3. Data consistency check\r",
							"pm.test(\"Response matches request data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const requestData = JSON.parse(pm.request.body.raw);\r",
							"    \r",
							"    pm.expect(responseData.username).to.eql(requestData.username);\r",
							"    pm.expect(responseData.email).to.eql(requestData.email);\r",
							"    pm.expect(responseData.firstname).to.eql(requestData.firstname);\r",
							"    pm.expect(responseData.lastname).to.eql(requestData.lastname);\r",
							"    pm.expect(responseData.role).to.eql(requestData.role);\r",
							"    pm.expect(responseData.isActive).to.eql(requestData.isActive);\r",
							"});\r",
							"\r",
							"// 4. Store created user ID for future tests\r",
							"pm.test(\"Store created user ID for cleanup\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.environment.set(\"created_user_id\", responseData.id);\r",
							"    pm.environment.set(\"created_username\", responseData.username);\r",
							"    console.log(\"Created user ID:\", responseData.id);\r",
							"});\r",
							"\r",
							"// 5. Profile details validation (if included in response)\r",
							"pm.test(\"Profile details are processed\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    // If your response includes profile details, test them\r",
							"    if (responseData.profileDetails) {\r",
							"        pm.expect(responseData.profileDetails).to.have.property('dateOfBirth');\r",
							"        pm.expect(responseData.profileDetails).to.have.property('gender');\r",
							"    }\r",
							"});\r",
							"\r",
							"// 6. Security check - no password in response\r",
							"pm.test(\"Password not exposed in response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.not.have.property('password');\r",
							"});\r",
							"\r",
							"// 7. Response time performance\r",
							"pm.test(\"Response time under 3 seconds\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"mairy\",\r\n    \"password\": \"12345\",\r\n    \"email\": \"mairy@email.com\",\r\n    \"firstname\": \"Mairy\",\r\n    \"lastname\": \"Poppins\",\r\n    \"role\": \"SPOTTER\",\r\n    \"isActive\": true,\r\n    \"profileDetailsInsertDTO\": {\r\n        \"dateOfBirth\": \"1988-10-03\",\r\n        \"gender\": \"MALE\"\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/users/save",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users",
						"save"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST user login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has access token\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.token).to.be.a('string');\r",
							"    pm.expect(jsonData.token.length).to.be.greaterThan(50); // JWT tokens are long\r",
							"});\r",
							"\r",
							"pm.test(\"Response has user information\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('userId');\r",
							"    pm.expect(jsonData).to.have.property('username');\r",
							"    pm.expect(jsonData.username).to.be.a('string');\r",
							"});\r",
							"\r",
							"// Set environment variables for other requests\r",
							"pm.test(\"Set authentication variables\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    // Store token for future requests\r",
							"    pm.environment.set(\"access_token\", jsonData.token);\r",
							"    pm.environment.set(\"user_id\", jsonData.userId);\r",
							"    pm.environment.set(\"username\", jsonData.username);\r",
							"    \r",
							"    console.log(\"Token set:\", jsonData.token);\r",
							"    console.log(\"User ID set:\", jsonData.userId);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"admin\",\r\n  \"password\": \"12345\"\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/auth/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ===== GET ALL USERS TESTS =====\r",
							"\r",
							"// 1. Basic response validation\r",
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has JSON content type\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"});\r",
							"\r",
							"// 2. Response structure validation\r",
							"pm.test(\"Response returns an array of users\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    pm.expect(responseData.length).to.be.greaterThan(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Each user has required fields\", function () {\r",
							"    const users = pm.response.json();\r",
							"    \r",
							"    users.forEach((user, index) => {\r",
							"        pm.expect(user, `User at index ${index}`).to.be.an('object');\r",
							"        pm.expect(user, `User at index ${index}`).to.have.property('id');\r",
							"        pm.expect(user, `User at index ${index}`).to.have.property('username');\r",
							"        pm.expect(user, `User at index ${index}`).to.have.property('email');\r",
							"        pm.expect(user, `User at index ${index}`).to.have.property('role');\r",
							"        pm.expect(user, `User at index ${index}`).to.have.property('isActive');\r",
							"    });\r",
							"});\r",
							"\r",
							"// 3. Data quality checks\r",
							"pm.test(\"No passwords exposed in response\", function () {\r",
							"    const users = pm.response.json();\r",
							"    \r",
							"    users.forEach((user, index) => {\r",
							"        pm.expect(user, `User at index ${index}`).to.not.have.property('password');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"User IDs are positive numbers\", function () {\r",
							"    const users = pm.response.json();\r",
							"    \r",
							"    users.forEach((user, index) => {\r",
							"        pm.expect(user.id, `User at index ${index}`).to.be.a('number');\r",
							"        pm.expect(user.id, `User at index ${index}`).to.be.greaterThan(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"// 4. Admin-specific validation (if applicable)\r",
							"pm.test(\"Active users have valid status\", function () {\r",
							"    const users = pm.response.json();\r",
							"    \r",
							"    users.forEach((user, index) => {\r",
							"        pm.expect(user.isActive, `User at index ${index}`).to.be.a('boolean');\r",
							"    });\r",
							"});\r",
							"\r",
							"// 5. Performance test\r",
							"pm.test(\"Response time under 5 seconds\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"// 6. Store first user for potential future tests\r",
							"pm.test(\"Store first user data for reference\", function () {\r",
							"    const users = pm.response.json();\r",
							"    if (users.length > 0) {\r",
							"        const firstUser = users[0];\r",
							"        pm.environment.set(\"first_user_id\", firstUser.id);\r",
							"        pm.environment.set(\"first_user_username\", firstUser.username);\r",
							"        console.log(\"First user ID:\", firstUser.id);\r",
							"    }\r",
							"});\r",
							"\r",
							"// 7. Optional: Check if specific test users exist\r",
							"pm.test(\"Test users exist in response\", function () {\r",
							"    const users = pm.response.json();\r",
							"    const usernames = users.map(user => user.username);\r",
							"    \r",
							"    // Check for admin user\r",
							"    pm.expect(usernames).to.include(\"admin\");\r",
							"    \r",
							"    // Check for your test user if it exists\r",
							"    const testUsername = pm.environment.get(\"created_username\");\r",
							"    if (testUsername) {\r",
							"        pm.expect(usernames).to.include(testUsername);\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "payload",
							"value": "{}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/users",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "POST new log",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ===== CREATE BIRD WATCHING LOG TESTS =====\r",
							"\r",
							"// 1. Basic response validation\r",
							"pm.test(\"Status code is 201 Created or 200 OK\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has JSON content type\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"});\r",
							"\r",
							"// 2. Response structure validation\r",
							"pm.test(\"Response contains log data with ID\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"    pm.expect(responseData.id).to.be.a('number');\r",
							"    pm.expect(responseData.id).to.be.greaterThan(0);\r",
							"});\r",
							"\r",
							"// 3. Required fields validation\r",
							"pm.test(\"Response contains all required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.have.property('bird');\r",
							"    pm.expect(responseData).to.have.property('quantity');\r",
							"    pm.expect(responseData).to.have.property('region');\r",
							"    pm.expect(responseData).to.have.property('createdAt');\r",
							"});\r",
							"\r",
							"// 4. Bird object validation\r",
							"pm.test(\"Bird object has correct structure\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.bird).to.have.property('id');\r",
							"    pm.expect(responseData.bird).to.have.property('name');\r",
							"    pm.expect(responseData.bird).to.have.property('scientificName');\r",
							"    pm.expect(responseData.bird).to.have.property('family');\r",
							"    pm.expect(responseData.bird.family).to.have.property('id');\r",
							"    pm.expect(responseData.bird.family).to.have.property('name');\r",
							"});\r",
							"\r",
							"// 5. Region object validation\r",
							"pm.test(\"Region object has correct structure\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.region).to.have.property('id');\r",
							"    pm.expect(responseData.region).to.have.property('name');\r",
							"});\r",
							"\r",
							"// 6. Quantity validation\r",
							"pm.test(\"Quantity is positive number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.quantity).to.be.a('number');\r",
							"    pm.expect(responseData.quantity).to.be.greaterThan(0);\r",
							"});\r",
							"\r",
							"// 7. Timestamp validation\r",
							"pm.test(\"Timestamps are valid ISO dates\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.createdAt).to.be.a('string');\r",
							"    pm.expect(responseData.updatedAt).to.be.a('string');\r",
							"    pm.expect(new Date(responseData.createdAt).toString()).to.not.equal('Invalid Date');\r",
							"    pm.expect(new Date(responseData.updatedAt).toString()).to.not.equal('Invalid Date');\r",
							"});\r",
							"\r",
							"// 8. Store created log ID for cleanup\r",
							"pm.test(\"Store created log ID for future tests\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.environment.set(\"created_log_id\", responseData.id);\r",
							"    pm.environment.set(\"created_log_bird\", responseData.bird.name);\r",
							"    console.log(\"Created log ID:\", responseData.id, \"Bird:\", responseData.bird.name);\r",
							"});\r",
							"\r",
							"// 9. Data consistency check\r",
							"pm.test(\"Response matches request data\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const requestData = JSON.parse(pm.request.body.raw);\r",
							"    \r",
							"    pm.expect(responseData.bird.name).to.eql(requestData.birdName);\r",
							"    pm.expect(responseData.region.name).to.eql(requestData.regionName);\r",
							"    pm.expect(responseData.quantity).to.eql(requestData.quantity);\r",
							"});\r",
							"\r",
							"// 10. Performance test\r",
							"pm.test(\"Response time under 5 seconds\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"// 11. User information validation (if included)\r",
							"pm.test(\"User information is populated\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    if (responseData.user) {\r",
							"        pm.expect(responseData.user).to.have.property('id');\r",
							"        pm.expect(responseData.user).to.have.property('username');\r",
							"        pm.expect(responseData.user.username).to.be.a('string');\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"birdName\": \"Pallas's Sandgrouse\",\r\n    \"regionName\": \"Central Greece\",\r\n    \"quantity\": 1\r\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/bwlogs/save",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"bwlogs",
						"save"
					]
				}
			},
			"response": []
		},
		{
			"name": "get birds by search",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ===== BIRD SEARCH TESTS =====\r",
							"\r",
							"// 1. Basic response validation\r",
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has JSON content type\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"});\r",
							"\r",
							"// 2. Response structure validation\r",
							"pm.test(\"Response returns an array of bird results\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    pm.expect(responseData.length).to.be.greaterThan(0);\r",
							"});\r",
							"\r",
							"// 3. Required fields validation\r",
							"pm.test(\"Each bird has all required fields\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    \r",
							"    birds.forEach((bird, index) => {\r",
							"        pm.expect(bird, `Bird at index ${index}`).to.be.an('object');\r",
							"        pm.expect(bird, `Bird at index ${index}`).to.have.property('id');\r",
							"        pm.expect(bird, `Bird at index ${index}`).to.have.property('commonName');\r",
							"        pm.expect(bird, `Bird at index ${index}`).to.have.property('scientificName');\r",
							"        pm.expect(bird, `Bird at index ${index}`).to.have.property('familyName');\r",
							"        pm.expect(bird, `Bird at index ${index}`).to.have.property('imageUrl');\r",
							"        pm.expect(bird, `Bird at index ${index}`).to.have.property('displayText');\r",
							"        pm.expect(bird, `Bird at index ${index}`).to.have.property('searchableText');\r",
							"    });\r",
							"});\r",
							"\r",
							"// 4. Data type validation\r",
							"pm.test(\"All fields have correct data types\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    \r",
							"    birds.forEach((bird, index) => {\r",
							"        pm.expect(bird.id, `Bird ID at index ${index}`).to.be.a('number');\r",
							"        pm.expect(bird.commonName, `Common name at index ${index}`).to.be.a('string');\r",
							"        pm.expect(bird.scientificName, `Scientific name at index ${index}`).to.be.a('string');\r",
							"        pm.expect(bird.familyName, `Family name at index ${index}`).to.be.a('string');\r",
							"        pm.expect(bird.imageUrl, `Image URL at index ${index}`).to.be.a('string');\r",
							"        pm.expect(bird.displayText, `Display text at index ${index}`).to.be.a('string');\r",
							"        pm.expect(bird.searchableText, `Searchable text at index ${index}`).to.be.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"// 5. Data quality checks\r",
							"pm.test(\"Bird IDs are positive numbers\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    \r",
							"    birds.forEach((bird, index) => {\r",
							"        pm.expect(bird.id, `Bird at index ${index}`).to.be.greaterThan(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Names are not empty strings\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    \r",
							"    birds.forEach((bird, index) => {\r",
							"        pm.expect(bird.commonName, `Bird at index ${index}`).to.have.lengthOf.at.least(1);\r",
							"        pm.expect(bird.scientificName, `Bird at index ${index}`).to.have.lengthOf.at.least(1);\r",
							"        pm.expect(bird.familyName, `Bird at index ${index}`).to.have.lengthOf.at.least(1);\r",
							"    });\r",
							"});\r",
							"\r",
							"// 6. Search functionality validation\r",
							"pm.test(\"Results match search query\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    const query = pm.request.url.query.get('query').toLowerCase();\r",
							"    \r",
							"    birds.forEach((bird, index) => {\r",
							"        const matches = bird.searchableText.toLowerCase().includes(query) ||\r",
							"                       bird.commonName.toLowerCase().includes(query) ||\r",
							"                       bird.scientificName.toLowerCase().includes(query) ||\r",
							"                       bird.familyName.toLowerCase().includes(query);\r",
							"        \r",
							"        pm.expect(matches, `Bird \"${bird.commonName}\" should match query \"${query}\"`).to.be.true;\r",
							"    });\r",
							"});\r",
							"\r",
							"// 7. Limit parameter validation\r",
							"pm.test(\"Results respect limit parameter\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    const limit = parseInt(pm.request.url.query.get('limit')) || 10;\r",
							"    \r",
							"    pm.expect(birds.length).to.be.at.most(limit);\r",
							"});\r",
							"\r",
							"// 8. Image URL validation\r",
							"pm.test(\"Image URLs are valid (if present)\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    \r",
							"    birds.forEach((bird, index) => {\r",
							"        if (bird.imageUrl && bird.imageUrl !== '') {\r",
							"            pm.expect(bird.imageUrl, `Bird at index ${index}`).to.match(/^https?:\\/\\//);\r",
							"        }\r",
							"    });\r",
							"});\r",
							"\r",
							"// 9. Display text format validation\r",
							"pm.test(\"Display text follows expected format\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    \r",
							"    birds.forEach((bird, index) => {\r",
							"        const expectedFormat = `${bird.commonName} (${bird.scientificName}) | ${bird.familyName}`;\r",
							"        pm.expect(bird.displayText, `Bird at index ${index}`).to.equal(expectedFormat);\r",
							"    });\r",
							"});\r",
							"\r",
							"// 10. Performance test\r",
							"pm.test(\"Search response time under 3 seconds\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							"// 11. Store first result for potential future tests\r",
							"pm.test(\"Store first bird data for reference\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    if (birds.length > 0) {\r",
							"        const firstBird = birds[0];\r",
							"        pm.environment.set(\"searched_bird_id\", firstBird.id);\r",
							"        pm.environment.set(\"searched_bird_name\", firstBird.commonName);\r",
							"        console.log(\"First search result:\", firstBird.commonName);\r",
							"    }\r",
							"});\r",
							"\r",
							"// 12. Unique ID validation\r",
							"pm.test(\"No duplicate bird IDs in results\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    const birdIds = birds.map(bird => bird.id);\r",
							"    const uniqueIds = [...new Set(birdIds)];\r",
							"    \r",
							"    pm.expect(birdIds.length).to.equal(uniqueIds.length);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "payload",
							"value": "{}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/birds/search?query=ta&limit=7",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"birds",
						"search"
					],
					"query": [
						{
							"key": "query",
							"value": "ta"
						},
						{
							"key": "limit",
							"value": "7"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user by id",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// ===== SET ADMIN AUTH HEADER =====\r",
							"const adminToken = pm.environment.get(\"access_token\");\r",
							"\r",
							"if (!adminToken) {\r",
							"    throw new Error(\"Admin access token is required for this endpoint\");\r",
							"}\r",
							"\r",
							"pm.request.headers.add({\r",
							"    key: \"Authorization\",\r",
							"    value: `Bearer ${adminToken}`\r",
							"});\r",
							"\r",
							"console.log(\"Using admin token for user lookup\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ===== GET USER BY ID TESTS =====\r",
							"\r",
							"// 1. Basic response validation\r",
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has JSON content type\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"});\r",
							"\r",
							"// 2. Response structure validation\r",
							"pm.test(\"Response returns a single user object\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.not.be.an('array');\r",
							"});\r",
							"\r",
							"// 3. Required fields validation\r",
							"pm.test(\"User has all required fields\", function () {\r",
							"    const user = pm.response.json();\r",
							"    \r",
							"    pm.expect(user).to.have.property('id');\r",
							"    pm.expect(user).to.have.property('username');\r",
							"    pm.expect(user).to.have.property('email');\r",
							"    pm.expect(user).to.have.property('firstname');\r",
							"    pm.expect(user).to.have.property('lastname');\r",
							"    pm.expect(user).to.have.property('role');\r",
							"    pm.expect(user).to.have.property('isActive');\r",
							"    pm.expect(user).to.have.property('profileDetails');\r",
							"});\r",
							"\r",
							"// 4. Profile details validation\r",
							"pm.test(\"Profile details has required fields\", function () {\r",
							"    const user = pm.response.json();\r",
							"    \r",
							"    pm.expect(user.profileDetails).to.have.property('dateOfBirth');\r",
							"    pm.expect(user.profileDetails).to.have.property('gender');\r",
							"});\r",
							"\r",
							"// 5. Data type validation\r",
							"pm.test(\"All fields have correct data types\", function () {\r",
							"    const user = pm.response.json();\r",
							"    \r",
							"    pm.expect(user.id).to.be.a('number');\r",
							"    pm.expect(user.username).to.be.a('string');\r",
							"    pm.expect(user.email).to.be.a('string');\r",
							"    pm.expect(user.firstname).to.be.a('string');\r",
							"    pm.expect(user.lastname).to.be.a('string');\r",
							"    pm.expect(user.role).to.be.a('string');\r",
							"    pm.expect(user.isActive).to.be.a('boolean');\r",
							"    pm.expect(user.profileDetails).to.be.an('object');\r",
							"    pm.expect(user.profileDetails.dateOfBirth).to.be.a('string');\r",
							"    pm.expect(user.profileDetails.gender).to.be.a('string');\r",
							"});\r",
							"\r",
							"// 6. Data quality checks\r",
							"pm.test(\"User ID is positive number\", function () {\r",
							"    const user = pm.response.json();\r",
							"    pm.expect(user.id).to.be.greaterThan(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Email has valid format\", function () {\r",
							"    const user = pm.response.json();\r",
							"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
							"    pm.expect(user.email).to.match(emailRegex);\r",
							"});\r",
							"\r",
							"pm.test(\"Names are not empty\", function () {\r",
							"    const user = pm.response.json();\r",
							"    pm.expect(user.username).to.have.lengthOf.at.least(1);\r",
							"    pm.expect(user.firstname).to.have.lengthOf.at.least(1);\r",
							"    pm.expect(user.lastname).to.have.lengthOf.at.least(1);\r",
							"});\r",
							"\r",
							"// 7. Role validation\r",
							"pm.test(\"Role is valid value\", function () {\r",
							"    const user = pm.response.json();\r",
							"    pm.expect(user.role).to.be.oneOf(['ADMIN', 'SPOTTER']);\r",
							"});\r",
							"\r",
							"// 8. Date validation\r",
							"pm.test(\"Date of birth is valid format\", function () {\r",
							"    const user = pm.response.json();\r",
							"    const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\r",
							"    pm.expect(user.profileDetails.dateOfBirth).to.match(dateRegex);\r",
							"    \r",
							"    // Check if it's a valid date\r",
							"    const dobDate = new Date(user.profileDetails.dateOfBirth);\r",
							"    pm.expect(dobDate.toString()).to.not.equal('Invalid Date');\r",
							"});\r",
							"\r",
							"// 9. Gender validation\r",
							"pm.test(\"Gender is valid value\", function () {\r",
							"    const user = pm.response.json();\r",
							"    const validGenders = ['MALE', 'FEMALE', 'NON_BINARY', 'GENDER_FLUID', 'OTHER'];\r",
							"    pm.expect(user.profileDetails.gender).to.be.oneOf(validGenders);\r",
							"});\r",
							"\r",
							"// 10. URL parameter validation\r",
							"pm.test(\"Response ID matches requested ID\", function () {\r",
							"    const user = pm.response.json();\r",
							"    const requestedId = pm.request.url.path.pop(); // Get the ID from URL\r",
							"    \r",
							"    pm.expect(user.id.toString()).to.equal(requestedId);\r",
							"});\r",
							"\r",
							"// 11. Security validation\r",
							"pm.test(\"No password field exposed\", function () {\r",
							"    const user = pm.response.json();\r",
							"    pm.expect(user).to.not.have.property('password');\r",
							"});\r",
							"\r",
							"// 12. Performance test\r",
							"pm.test(\"Response time under 2 seconds\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// 13. Store user data for potential future tests\r",
							"pm.test(\"Store user data for reference\", function () {\r",
							"    const user = pm.response.json();\r",
							"    pm.environment.set(\"user_id\", user.id);\r",
							"    pm.environment.set(\"user_username\", user.username);\r",
							"    pm.environment.set(\"user_email\", user.email);\r",
							"    console.log(\"User data stored:\", user.username);\r",
							"});\r",
							"\r",
							"// 14. Active status validation\r",
							"pm.test(\"Active status is boolean\", function () {\r",
							"    const user = pm.response.json();\r",
							"    pm.expect(user.isActive).to.be.a('boolean');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "payload",
							"value": "{}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/users/11",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users",
						"11"
					]
				}
			},
			"response": []
		},
		{
			"name": "get users paginated",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ===== SET ADMIN AUTH HEADER =====\r",
							"const token = pm.environment.get(\"access_token\");\r",
							"\r",
							"if (token) {\r",
							"    pm.request.headers.add({\r",
							"        key: \"Authorization\",\r",
							"        value: `Bearer ${token}`\r",
							"    });\r",
							"} else {\r",
							"    console.warn(\"No access token found - request may fail if authentication required\");\r",
							"}\r",
							"\r",
							"// ===== SET PAGINATION PARAMETERS =====\r",
							"const page = pm.request.url.query.get('page') || '0';\r",
							"const size = pm.request.url.query.get('size') || '5';\r",
							"console.log(`Requesting page ${page} with size ${size}`);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "payload",
							"value": "{}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/users/paginated",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users",
						"paginated"
					]
				}
			},
			"response": []
		},
		{
			"name": "get users filtered",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ===== FILTERED USERS TESTS =====\r",
							"\r",
							"// 1. Basic response validation\r",
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has JSON content type\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"});\r",
							"\r",
							"// 2. Response structure validation\r",
							"pm.test(\"Response returns an array of filtered users\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    pm.expect(responseData.length).to.be.greaterThan(0);\r",
							"});\r",
							"\r",
							"// 3. Filter validation - all results should match the filter\r",
							"pm.test(\"All users match the filter criteria\", function () {\r",
							"    const users = pm.response.json();\r",
							"    const requestData = JSON.parse(pm.request.body.raw);\r",
							"    \r",
							"    users.forEach((user, index) => {\r",
							"        // Check role filter\r",
							"        if (requestData.role) {\r",
							"            pm.expect(user.role, `User at index ${index}`).to.equal(requestData.role);\r",
							"        }\r",
							"        \r",
							"        // Check username filter (if provided)\r",
							"        if (requestData.username) {\r",
							"            pm.expect(user.username.toLowerCase(), `User at index ${index}`).to.include(requestData.username.toLowerCase());\r",
							"        }\r",
							"        \r",
							"        // Check firstname filter (if provided)\r",
							"        if (requestData.firstname) {\r",
							"            pm.expect(user.firstname.toLowerCase(), `User at index ${index}`).to.include(requestData.firstname.toLowerCase());\r",
							"        }\r",
							"        \r",
							"        // Check lastname filter (if provided)\r",
							"        if (requestData.lastname) {\r",
							"            pm.expect(user.lastname.toLowerCase(), `User at index ${index}`).to.include(requestData.lastname.toLowerCase());\r",
							"        }\r",
							"    });\r",
							"});\r",
							"\r",
							"// 4. User object validation\r",
							"pm.test(\"Each user has required fields\", function () {\r",
							"    const users = pm.response.json();\r",
							"    \r",
							"    users.forEach((user, index) => {\r",
							"        pm.expect(user, `User at index ${index}`).to.have.property('id');\r",
							"        pm.expect(user, `User at index ${index}`).to.have.property('username');\r",
							"        pm.expect(user, `User at index ${index}`).to.have.property('email');\r",
							"        pm.expect(user, `User at index ${index}`).to.have.property('firstname');\r",
							"        pm.expect(user, `User at index ${index}`).to.have.property('lastname');\r",
							"        pm.expect(user, `User at index ${index}`).to.have.property('role');\r",
							"        pm.expect(user, `User at index ${index}`).to.have.property('isActive');\r",
							"        pm.expect(user, `User at index ${index}`).to.have.property('profileDetails');\r",
							"    });\r",
							"});\r",
							"\r",
							"// 5. Data quality checks\r",
							"pm.test(\"User data quality validation\", function () {\r",
							"    const users = pm.response.json();\r",
							"    \r",
							"    users.forEach((user, index) => {\r",
							"        pm.expect(user.id, `User at index ${index}`).to.be.a('number').and.to.be.greaterThan(0);\r",
							"        pm.expect(user.username, `User at index ${index}`).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
							"        pm.expect(user.email, `User at index ${index}`).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
							"        pm.expect(user.role, `User at index ${index}`).to.be.oneOf(['ADMIN', 'SPOTTER']);\r",
							"        pm.expect(user.isActive, `User at index ${index}`).to.be.a('boolean');\r",
							"    });\r",
							"});\r",
							"\r",
							"// 6. Profile details validation\r",
							"pm.test(\"Profile details are valid\", function () {\r",
							"    const users = pm.response.json();\r",
							"    \r",
							"    users.forEach((user, index) => {\r",
							"        pm.expect(user.profileDetails, `User at index ${index}`).to.have.property('dateOfBirth');\r",
							"        pm.expect(user.profileDetails, `User at index ${index}`).to.have.property('gender');\r",
							"        pm.expect(user.profileDetails.dateOfBirth).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"        pm.expect(user.profileDetails.gender).to.be.oneOf(['MALE', 'FEMALE', 'NON_BINARY', 'GENDER_FLUID', 'OTHER']);\r",
							"    });\r",
							"});\r",
							"\r",
							"// 7. Request body validation\r",
							"pm.test(\"Request body was processed correctly\", function () {\r",
							"    const requestData = JSON.parse(pm.request.body.raw);\r",
							"    const users = pm.response.json();\r",
							"    \r",
							"    // Verify we got results for the filter\r",
							"    pm.expect(users.length).to.be.greaterThan(0);\r",
							"    \r",
							"    // Log the filter criteria for debugging\r",
							"    console.log(\"Filter criteria:\", requestData);\r",
							"    console.log(\"Found\", users.length, \"matching users\");\r",
							"});\r",
							"\r",
							"// 8. Performance test\r",
							"pm.test(\"Filter response time under 3 seconds\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							"// 9. Store filtered results for potential future tests\r",
							"pm.test(\"Store filtered user data for reference\", function () {\r",
							"    const users = pm.response.json();\r",
							"    \r",
							"    if (users.length > 0) {\r",
							"        const firstUser = users[0];\r",
							"        pm.environment.set(\"filtered_user_id\", firstUser.id);\r",
							"        pm.environment.set(\"filtered_user_username\", firstUser.username);\r",
							"        pm.environment.set(\"filtered_user_role\", firstUser.role);\r",
							"        console.log(\"First filtered user:\", firstUser.username, \"Role:\", firstUser.role);\r",
							"    }\r",
							"    \r",
							"    pm.environment.set(\"filtered_users_count\", users.length);\r",
							"});\r",
							"\r",
							"// 10. Security validation\r",
							"pm.test(\"No sensitive data exposed\", function () {\r",
							"    const users = pm.response.json();\r",
							"    \r",
							"    users.forEach((user, index) => {\r",
							"        pm.expect(user, `User at index ${index}`).to.not.have.property('password');\r",
							"    });\r",
							"});\r",
							"\r",
							"// 11. Empty filter handling (optional)\r",
							"pm.test(\"Empty filter returns all users or reasonable subset\", function () {\r",
							"    const users = pm.response.json();\r",
							"    // This is a reasonable expectation for a filtered endpoint\r",
							"    pm.expect(users.length).to.be.greaterThan(0);\r",
							"});\r",
							"\r",
							"// 12. Case insensitive filter test (based on your response)\r",
							"pm.test(\"Filtering is case insensitive\", function () {\r",
							"    const users = pm.response.json();\r",
							"    const requestData = JSON.parse(pm.request.body.raw);\r",
							"    \r",
							"    // Your response shows \"SPOTTER\" filter found users correctly\r",
							"    users.forEach((user, index) => {\r",
							"        pm.expect(user.role).to.equal('SPOTTER');\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "jwt",
					"jwt": [
						{
							"key": "algorithm",
							"value": "HS256",
							"type": "string"
						},
						{
							"key": "isSecretBase64Encoded",
							"value": false,
							"type": "boolean"
						},
						{
							"key": "payload",
							"value": "{}",
							"type": "string"
						},
						{
							"key": "addTokenTo",
							"value": "header",
							"type": "string"
						},
						{
							"key": "headerPrefix",
							"value": "Bearer",
							"type": "string"
						},
						{
							"key": "queryParamKey",
							"value": "token",
							"type": "string"
						},
						{
							"key": "header",
							"value": "{}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": null,\r\n  \"firstname\": null,\r\n  \"lastname\": null,\r\n  \"role\": \"SPOTTER\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/users/filtered",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users",
						"filtered"
					]
				}
			},
			"response": []
		},
		{
			"name": "get users filtered and paginated",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ===== PAGINATED & FILTERED USERS TESTS =====\r",
							"\r",
							"// 1. Basic response validation\r",
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has JSON content type\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"});\r",
							"\r",
							"// 2. Pagination structure validation\r",
							"pm.test(\"Response has pagination structure\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.have.property('data');\r",
							"    pm.expect(responseData).to.have.property('totalElements');\r",
							"    pm.expect(responseData).to.have.property('totalPages');\r",
							"    pm.expect(responseData).to.have.property('numberOfElements');\r",
							"    pm.expect(responseData).to.have.property('currentPage');\r",
							"    pm.expect(responseData).to.have.property('pageSize');\r",
							"});\r",
							"\r",
							"// 3. Content array validation\r",
							"pm.test(\"Data contains array of users\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.data).to.be.an('array');\r",
							"    pm.expect(responseData.data.length).to.be.greaterThan(0);\r",
							"    pm.expect(responseData.numberOfElements).to.equal(responseData.data.length);\r",
							"});\r",
							"\r",
							"// 4. Pagination metadata validation\r",
							"pm.test(\"Pagination metadata is correct\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.totalElements).to.be.a('number').and.to.be.greaterThan(0);\r",
							"    pm.expect(responseData.totalPages).to.be.a('number').and.to.be.greaterThan(0);\r",
							"    pm.expect(responseData.pageSize).to.be.a('number').and.to.be.greaterThan(0);\r",
							"    pm.expect(responseData.currentPage).to.be.a('number').and.to.be.at.least(0);\r",
							"    pm.expect(responseData.numberOfElements).to.be.a('number').and.to.be.at.most(responseData.pageSize);\r",
							"});\r",
							"\r",
							"// 5. Request parameter validation\r",
							"pm.test(\"Pagination parameters are respected\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const requestData = JSON.parse(pm.request.body.raw);\r",
							"    \r",
							"    pm.expect(responseData.currentPage).to.equal(requestData.page);\r",
							"    pm.expect(responseData.pageSize).to.equal(requestData.pageSize);\r",
							"    pm.expect(responseData.data.length).to.be.at.most(requestData.pageSize);\r",
							"});\r",
							"\r",
							"// 6. Sort validation (username ASC)\r",
							"pm.test(\"Results are sorted correctly by username ASC\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const requestData = JSON.parse(pm.request.body.raw);\r",
							"    \r",
							"    if (requestData.sortBy === \"username\" && requestData.sortDirection === \"ASC\") {\r",
							"        const usernames = responseData.data.map(user => user.username.toLowerCase());\r",
							"        const sortedUsernames = [...usernames].sort();\r",
							"        \r",
							"        pm.expect(usernames).to.eql(sortedUsernames);\r",
							"    }\r",
							"});\r",
							"\r",
							"// 7. User object validation\r",
							"pm.test(\"Each user has required fields\", function () {\r",
							"    const users = pm.response.json().data;\r",
							"    \r",
							"    users.forEach((user, index) => {\r",
							"        pm.expect(user, `User at index ${index}`).to.have.property('id');\r",
							"        pm.expect(user, `User at index ${index}`).to.have.property('username');\r",
							"        pm.expect(user, `User at index ${index}`).to.have.property('email');\r",
							"        pm.expect(user, `User at index ${index}`).to.have.property('firstname');\r",
							"        pm.expect(user, `User at index ${index}`).to.have.property('lastname');\r",
							"        pm.expect(user, `User at index ${index}`).to.have.property('role');\r",
							"        pm.expect(user, `User at index ${index}`).to.have.property('isActive');\r",
							"        pm.expect(user, `User at index ${index}`).to.have.property('profileDetails');\r",
							"    });\r",
							"});\r",
							"\r",
							"// 8. Data quality checks\r",
							"pm.test(\"User data quality validation\", function () {\r",
							"    const users = pm.response.json().data;\r",
							"    \r",
							"    users.forEach((user, index) => {\r",
							"        pm.expect(user.id, `User at index ${index}`).to.be.a('number').and.to.be.greaterThan(0);\r",
							"        pm.expect(user.username, `User at index ${index}`).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
							"        pm.expect(user.email, `User at index ${index}`).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
							"        pm.expect(user.role, `User at index ${index}`).to.be.oneOf(['ADMIN', 'SPOTTER']);\r",
							"        pm.expect(user.isActive, `User at index ${index}`).to.be.a('boolean');\r",
							"    });\r",
							"});\r",
							"\r",
							"// 9. Profile details validation\r",
							"pm.test(\"Profile details are valid\", function () {\r",
							"    const users = pm.response.json().data;\r",
							"    \r",
							"    users.forEach((user, index) => {\r",
							"        pm.expect(user.profileDetails, `User at index ${index}`).to.have.property('dateOfBirth');\r",
							"        pm.expect(user.profileDetails, `User at index ${index}`).to.have.property('gender');\r",
							"        pm.expect(user.profileDetails.dateOfBirth).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
							"        pm.expect(user.profileDetails.gender).to.be.oneOf(['MALE', 'FEMALE', 'NON_BINARY', 'GENDER_FLUID', 'OTHER']);\r",
							"    });\r",
							"});\r",
							"\r",
							"// 10. Filter validation - null filters should return all users\r",
							"pm.test(\"Null filters return all users (paginated)\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const requestData = JSON.parse(pm.request.body.raw);\r",
							"    \r",
							"    // With all null filters, should return a reasonable number of users\r",
							"    pm.expect(responseData.data.length).to.be.greaterThan(0);\r",
							"    pm.expect(responseData.totalElements).to.be.greaterThan(0);\r",
							"});\r",
							"\r",
							"// 11. Performance test\r",
							"pm.test(\"Paginated filter response time under 3 seconds\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							"// 12. Store pagination info for future tests\r",
							"pm.test(\"Store pagination data for reference\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.environment.set(\"total_filtered_users\", responseData.totalElements);\r",
							"    pm.environment.set(\"total_filtered_pages\", responseData.totalPages);\r",
							"    pm.environment.set(\"current_filtered_page\", responseData.currentPage);\r",
							"    \r",
							"    if (responseData.data.length > 0) {\r",
							"        const firstUser = responseData.data[0];\r",
							"        pm.environment.set(\"first_filtered_user_id\", firstUser.id);\r",
							"        pm.environment.set(\"first_filtered_username\", firstUser.username);\r",
							"    }\r",
							"    \r",
							"    console.log(`Page ${responseData.currentPage + 1} of ${responseData.totalPages}, ${responseData.totalElements} total filtered users`);\r",
							"});\r",
							"\r",
							"// 13. Security validation\r",
							"pm.test(\"No sensitive data exposed\", function () {\r",
							"    const users = pm.response.json().data;\r",
							"    \r",
							"    users.forEach((user, index) => {\r",
							"        pm.expect(user, `User at index ${index}`).to.not.have.property('password');\r",
							"    });\r",
							"});\r",
							"\r",
							"// 14. Verify username sorting (specific test for your request)\r",
							"pm.test(\"Users are sorted by username ASC\", function () {\r",
							"    const users = pm.response.json().data;\r",
							"    const usernames = users.map(user => user.username.toLowerCase());\r",
							"    \r",
							"    // Check if sorted alphabetically\r",
							"    for (let i = 0; i < usernames.length - 1; i++) {\r",
							"        pm.expect(usernames[i] <= usernames[i + 1], `Usernames not sorted: ${usernames[i]} > ${usernames[i + 1]}`).to.be.true;\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"page\": 0,\r\n  \"pageSize\": 10,\r\n  \"sortDirection\": \"ASC\",\r\n  \"sortBy\": \"username\",\r\n  \"id\": null,\r\n  \"username\": null,\r\n  \"email\": null,\r\n  \"role\": null,\r\n  \"isActive\": null,\r\n  \"gender\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/users/filtered/paginated",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users",
						"filtered",
						"paginated"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get first 50 birds",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ===== BIRD SEARCH TESTS =====\r",
							"\r",
							"// 1. Basic response validation\r",
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has JSON content type\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is under 2 seconds\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// 2. Pagination / meta validation\r",
							"pm.test(\"Response contains pagination info\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.property(\"content\");\r",
							"    pm.expect(response).to.have.property(\"pageable\");\r",
							"    pm.expect(response).to.have.property(\"totalPages\");\r",
							"    pm.expect(response).to.have.property(\"totalElements\");\r",
							"    pm.expect(response.content).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"// 3. Required fields validation\r",
							"pm.test(\"Each bird has all required fields\", function () {\r",
							"    const birds = pm.response.json().content || [];\r",
							"    \r",
							"    birds.forEach((bird, index) => {\r",
							"        pm.expect(bird, `Bird at index ${index}`).to.be.an('object');\r",
							"        [\r",
							"            \"id\", \"commonName\", \"scientificName\", \"familyName\",\r",
							"            \"imageUrl\", \"displayText\", \"searchableText\"\r",
							"        ].forEach(field => {\r",
							"            pm.expect(bird, `Bird at index ${index}`).to.have.property(field);\r",
							"        });\r",
							"    });\r",
							"});\r",
							"\r",
							"// 4. Data type validation\r",
							"pm.test(\"All fields have correct data types\", function () {\r",
							"    const birds = pm.response.json().content || [];\r",
							"    \r",
							"    birds.forEach((bird, index) => {\r",
							"        pm.expect(bird.id, `Bird ID at index ${index}`).to.be.a(\"number\");\r",
							"        pm.expect(bird.commonName, `Common name at index ${index}`).to.be.a(\"string\");\r",
							"        pm.expect(bird.scientificName, `Scientific name at index ${index}`).to.be.a(\"string\");\r",
							"        pm.expect(bird.familyName, `Family name at index ${index}`).to.be.a(\"string\");\r",
							"        pm.expect(bird.imageUrl, `Image URL at index ${index}`).to.be.a(\"string\");\r",
							"        pm.expect(bird.displayText, `Display text at index ${index}`).to.be.a(\"string\");\r",
							"        pm.expect(bird.searchableText, `Searchable text at index ${index}`).to.be.a(\"string\");\r",
							"    });\r",
							"});\r",
							"\r",
							"// 5. Data quality checks\r",
							"pm.test(\"Bird IDs are positive numbers\", function () {\r",
							"    const birds = pm.response.json().content || [];\r",
							"    birds.forEach((bird, index) => {\r",
							"        pm.expect(bird.id, `Bird at index ${index}`).to.be.greaterThan(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Names are not empty strings\", function () {\r",
							"    const birds = pm.response.json().content || [];\r",
							"    birds.forEach((bird, index) => {\r",
							"        pm.expect(bird.commonName).to.have.lengthOf.at.least(1);\r",
							"        pm.expect(bird.scientificName).to.have.lengthOf.at.least(1);\r",
							"        pm.expect(bird.familyName).to.have.lengthOf.at.least(1);\r",
							"    });\r",
							"});\r",
							"\r",
							"// 6. Search functionality validation\r",
							"if (pm.request.url.query.has(\"query\")) {\r",
							"    pm.test(\"Results match search query\", function () {\r",
							"        const birds = pm.response.json().content || [];\r",
							"        const query = pm.request.url.query.get(\"query\").toLowerCase();\r",
							"        \r",
							"        birds.forEach((bird) => {\r",
							"            const matches = bird.searchableText.toLowerCase().includes(query) ||\r",
							"                           bird.commonName.toLowerCase().includes(query) ||\r",
							"                           bird.scientificName.toLowerCase().includes(query) ||\r",
							"                           bird.familyName.toLowerCase().includes(query);\r",
							"            pm.expect(matches, `Bird \"${bird.commonName}\" should match query \"${query}\"`).to.be.true;\r",
							"        });\r",
							"    });\r",
							"}\r",
							"\r",
							"// 7. Limit parameter validation\r",
							"if (pm.request.url.query.has(\"size\")) {\r",
							"    pm.test(\"Results respect size parameter\", function () {\r",
							"        const birds = pm.response.json().content || [];\r",
							"        const size = parseInt(pm.request.url.query.get(\"size\")) || 10;\r",
							"        pm.expect(birds.length).to.be.at.most(size);\r",
							"    });\r",
							"}\r",
							"\r",
							"// 8. Image URL validation\r",
							"pm.test(\"Image URLs are valid (if present)\", function () {\r",
							"    const birds = pm.response.json().content || [];\r",
							"    birds.forEach((bird, index) => {\r",
							"        if (bird.imageUrl && bird.imageUrl !== \"\") {\r",
							"            pm.expect(bird.imageUrl, `Bird at index ${index}`).to.match(/^https?:\\/\\/.+/);\r",
							"        }\r",
							"    });\r",
							"});\r",
							"\r",
							"// 9. Display text format validation\r",
							"pm.test(\"Display text follows expected format\", function () {\r",
							"    const birds = pm.response.json().content || [];\r",
							"    birds.forEach((bird, index) => {\r",
							"        const expectedFormat = `${bird.commonName} (${bird.scientificName}) | ${bird.familyName}`;\r",
							"        pm.expect(bird.displayText, `Bird at index ${index}`).to.equal(expectedFormat);\r",
							"    });\r",
							"});\r",
							"\r",
							"// 10. Unique ID validation\r",
							"pm.test(\"No duplicate bird IDs in results\", function () {\r",
							"    const birds = pm.response.json().content || [];\r",
							"    const ids = birds.map(bird => bird.id);\r",
							"    const uniqueIds = [...new Set(ids)];\r",
							"    pm.expect(ids.length).to.equal(uniqueIds.length);\r",
							"});\r",
							"\r",
							"// 11. Store first result for potential future tests\r",
							"pm.test(\"Store first bird data for reference\", function () {\r",
							"    const birds = pm.response.json().content || [];\r",
							"    if (birds.length > 0) {\r",
							"        const firstBird = birds[0];\r",
							"        pm.environment.set(\"searched_bird_id\", firstBird.id);\r",
							"        pm.environment.set(\"searched_bird_name\", firstBird.commonName);\r",
							"        console.log(\"Stored first search result:\", firstBird.commonName);\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/birds?size=50",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"birds"
					],
					"query": [
						{
							"key": "size",
							"value": "50"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get all birds paginated",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ===== PAGINATED BIRDS TESTS =====\r",
							"\r",
							"// 1. Basic response validation\r",
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has JSON content type\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"});\r",
							"\r",
							"// 2. Pagination structure validation (Spring Data format)\r",
							"pm.test(\"Response has Spring Data pagination structure\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.have.property('content');\r",
							"    pm.expect(responseData).to.have.property('pageable');\r",
							"    pm.expect(responseData).to.have.property('totalPages');\r",
							"    pm.expect(responseData).to.have.property('totalElements');\r",
							"    pm.expect(responseData).to.have.property('first');\r",
							"    pm.expect(responseData).to.have.property('last');\r",
							"    pm.expect(responseData).to.have.property('size');\r",
							"    pm.expect(responseData).to.have.property('number');\r",
							"    pm.expect(responseData).to.have.property('numberOfElements');\r",
							"    pm.expect(responseData).to.have.property('sort');\r",
							"});\r",
							"\r",
							"// 3. Content array validation\r",
							"pm.test(\"Content contains array of birds\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.content).to.be.an('array');\r",
							"    pm.expect(responseData.content.length).to.be.greaterThan(0);\r",
							"    pm.expect(responseData.numberOfElements).to.equal(responseData.content.length);\r",
							"});\r",
							"\r",
							"// 4. Bird object validation\r",
							"pm.test(\"Each bird has required fields\", function () {\r",
							"    const birds = pm.response.json().content;\r",
							"    \r",
							"    birds.forEach((bird, index) => {\r",
							"        pm.expect(bird, `Bird at index ${index}`).to.have.property('id');\r",
							"        pm.expect(bird, `Bird at index ${index}`).to.have.property('commonName');\r",
							"        pm.expect(bird, `Bird at index ${index}`).to.have.property('scientificName');\r",
							"        pm.expect(bird, `Bird at index ${index}`).to.have.property('familyName');\r",
							"        pm.expect(bird, `Bird at index ${index}`).to.have.property('imageUrl');\r",
							"        pm.expect(bird, `Bird at index ${index}`).to.have.property('displayText');\r",
							"        pm.expect(bird, `Bird at index ${index}`).to.have.property('searchableText');\r",
							"    });\r",
							"});\r",
							"\r",
							"// 5. Data quality checks\r",
							"pm.test(\"Bird data quality validation\", function () {\r",
							"    const birds = pm.response.json().content;\r",
							"    \r",
							"    birds.forEach((bird, index) => {\r",
							"        pm.expect(bird.id, `Bird at index ${index}`).to.be.a('number').and.to.be.greaterThan(0);\r",
							"        pm.expect(bird.commonName, `Bird at index ${index}`).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
							"        pm.expect(bird.scientificName, `Bird at index ${index}`).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
							"        pm.expect(bird.familyName, `Bird at index ${index}`).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
							"    });\r",
							"});\r",
							"\r",
							"// 6. Pagination metadata validation\r",
							"pm.test(\"Pagination metadata is correct\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.totalElements).to.be.a('number').and.to.be.greaterThan(0);\r",
							"    pm.expect(responseData.totalPages).to.be.a('number').and.to.be.greaterThan(0);\r",
							"    pm.expect(responseData.size).to.be.a('number').and.to.be.greaterThan(0);\r",
							"    pm.expect(responseData.number).to.be.a('number').and.to.be.at.least(0);\r",
							"    pm.expect(responseData.numberOfElements).to.be.a('number').and.to.be.at.most(responseData.size);\r",
							"});\r",
							"\r",
							"// 7. Query parameter validation\r",
							"pm.test(\"Pagination parameters are respected\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const requestedPage = parseInt(pm.request.url.query.get('page')) || 0;\r",
							"    const requestedSize = parseInt(pm.request.url.query.get('size')) || 20;\r",
							"    \r",
							"    pm.expect(responseData.number).to.equal(requestedPage);\r",
							"    pm.expect(responseData.size).to.equal(requestedSize);\r",
							"    pm.expect(responseData.content.length).to.be.at.most(requestedSize);\r",
							"});\r",
							"\r",
							"// 8. Pageable object validation\r",
							"pm.test(\"Pageable object has correct structure\", function () {\r",
							"    const pageable = pm.response.json().pageable;\r",
							"    \r",
							"    pm.expect(pageable).to.have.property('pageNumber');\r",
							"    pm.expect(pageable).to.have.property('pageSize');\r",
							"    pm.expect(pageable).to.have.property('sort');\r",
							"    pm.expect(pageable).to.have.property('offset');\r",
							"    pm.expect(pageable).to.have.property('paged');\r",
							"    pm.expect(pageable.pageNumber).to.equal(pm.response.json().number);\r",
							"    pm.expect(pageable.pageSize).to.equal(pm.response.json().size);\r",
							"});\r",
							"\r",
							"// 9. Sort object validation\r",
							"pm.test(\"Sort object has correct structure\", function () {\r",
							"    const sort = pm.response.json().sort;\r",
							"    \r",
							"    pm.expect(sort).to.have.property('empty');\r",
							"    pm.expect(sort).to.have.property('unsorted');\r",
							"    pm.expect(sort).to.have.property('sorted');\r",
							"    pm.expect(sort.empty).to.be.a('boolean');\r",
							"    pm.expect(sort.unsorted).to.be.a('boolean');\r",
							"    pm.expect(sort.sorted).to.be.a('boolean');\r",
							"});\r",
							"\r",
							"// 10. Display text format validation\r",
							"pm.test(\"Display text follows expected format\", function () {\r",
							"    const birds = pm.response.json().content;\r",
							"    \r",
							"    birds.forEach((bird, index) => {\r",
							"        const expectedFormat = `${bird.commonName} (${bird.scientificName}) | ${bird.familyName}`;\r",
							"        pm.expect(bird.displayText, `Bird at index ${index}`).to.equal(expectedFormat);\r",
							"    });\r",
							"});\r",
							"\r",
							"// 11. Image URL validation\r",
							"pm.test(\"Image URLs are valid format\", function () {\r",
							"    const birds = pm.response.json().content;\r",
							"    \r",
							"    birds.forEach((bird, index) => {\r",
							"        if (bird.imageUrl && bird.imageUrl !== '') {\r",
							"            pm.expect(bird.imageUrl, `Bird at index ${index}`).to.match(/^https?:\\/\\//);\r",
							"        }\r",
							"    });\r",
							"});\r",
							"\r",
							"// 12. Performance test\r",
							"pm.test(\"Paginated response time under 3 seconds\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							"// 13. Store pagination info for future tests\r",
							"pm.test(\"Store pagination data for reference\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.environment.set(\"total_birds\", responseData.totalElements);\r",
							"    pm.environment.set(\"total_bird_pages\", responseData.totalPages);\r",
							"    pm.environment.set(\"current_bird_page\", responseData.number);\r",
							"    \r",
							"    if (responseData.content.length > 0) {\r",
							"        const firstBird = responseData.content[0];\r",
							"        pm.environment.set(\"first_bird_id\", firstBird.id);\r",
							"        pm.environment.set(\"first_bird_name\", firstBird.commonName);\r",
							"    }\r",
							"    \r",
							"    console.log(`Page ${responseData.number + 1} of ${responseData.totalPages}, ${responseData.totalElements} total birds`);\r",
							"});\r",
							"\r",
							"// 14. Page navigation validation\r",
							"pm.test(\"Page navigation flags are correct\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.first).to.be.a('boolean');\r",
							"    pm.expect(responseData.last).to.be.a('boolean');\r",
							"    \r",
							"    // For page 1 of 23, first should be false, last should be false\r",
							"    if (responseData.number === 1) {\r",
							"        pm.expect(responseData.first).to.be.false;\r",
							"        pm.expect(responseData.last).to.be.false;\r",
							"    }\r",
							"});\r",
							"\r",
							"// 15. Offset calculation validation\r",
							"pm.test(\"Offset calculation is correct\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const expectedOffset = responseData.number * responseData.size;\r",
							"    \r",
							"    pm.expect(responseData.pageable.offset).to.equal(expectedOffset);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/birds?page=3&size=20",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"birds"
					],
					"query": [
						{
							"key": "page",
							"value": "3"
						},
						{
							"key": "size",
							"value": "20"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get next 50 birds",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ===== BIRD SEARCH PAGINATED TESTS =====\r",
							"\r",
							"// 1. Basic response validation\r",
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has JSON content type\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is under 2 seconds\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// 2. Structure validation\r",
							"pm.test(\"Response contains pagination metadata\", function () {\r",
							"    const res = pm.response.json();\r",
							"    pm.expect(res).to.have.property(\"content\");\r",
							"    pm.expect(res).to.have.property(\"pageable\");\r",
							"    pm.expect(res).to.have.property(\"totalPages\");\r",
							"    pm.expect(res).to.have.property(\"totalElements\");\r",
							"    pm.expect(res.content).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"// 3. Required fields in each bird\r",
							"pm.test(\"Each bird has required fields\", function () {\r",
							"    const birds = pm.response.json().content;\r",
							"    birds.forEach((bird, index) => {\r",
							"        [\r",
							"            \"id\", \"commonName\", \"scientificName\", \"familyName\",\r",
							"            \"imageUrl\", \"displayText\", \"searchableText\"\r",
							"        ].forEach(field => {\r",
							"            pm.expect(bird, `Bird at index ${index}`).to.have.property(field);\r",
							"        });\r",
							"    });\r",
							"});\r",
							"\r",
							"// 4. Data type validation\r",
							"pm.test(\"Bird fields have correct types\", function () {\r",
							"    const birds = pm.response.json().content;\r",
							"    birds.forEach((bird, index) => {\r",
							"        pm.expect(bird.id, `Bird ID ${index}`).to.be.a(\"number\");\r",
							"        pm.expect(bird.commonName, `Common name ${index}`).to.be.a(\"string\");\r",
							"        pm.expect(bird.scientificName, `Scientific name ${index}`).to.be.a(\"string\");\r",
							"        pm.expect(bird.familyName, `Family name ${index}`).to.be.a(\"string\");\r",
							"        pm.expect(bird.imageUrl, `Image URL ${index}`).to.be.a(\"string\");\r",
							"        pm.expect(bird.displayText, `Display text ${index}`).to.be.a(\"string\");\r",
							"        pm.expect(bird.searchableText, `Searchable text ${index}`).to.be.a(\"string\");\r",
							"    });\r",
							"});\r",
							"\r",
							"// 5. Data quality checks\r",
							"pm.test(\"Bird IDs are positive\", function () {\r",
							"    const birds = pm.response.json().content;\r",
							"    birds.forEach(bird => pm.expect(bird.id).to.be.greaterThan(0));\r",
							"});\r",
							"\r",
							"pm.test(\"Names are not empty\", function () {\r",
							"    const birds = pm.response.json().content;\r",
							"    birds.forEach((bird, index) => {\r",
							"        pm.expect(bird.commonName).to.have.lengthOf.at.least(1);\r",
							"        pm.expect(bird.scientificName).to.have.lengthOf.at.least(1);\r",
							"        pm.expect(bird.familyName).to.have.lengthOf.at.least(1);\r",
							"    });\r",
							"});\r",
							"\r",
							"// 6. Pagination correctness\r",
							"pm.test(\"Page size matches requested size\", function () {\r",
							"    const res = pm.response.json();\r",
							"    const requestedSize = parseInt(pm.request.url.query.get(\"size\")) || 10;\r",
							"    pm.expect(res.content.length).to.be.at.most(requestedSize);\r",
							"    pm.expect(res.size).to.equal(requestedSize);\r",
							"});\r",
							"\r",
							"pm.test(\"Page number matches request\", function () {\r",
							"    const res = pm.response.json();\r",
							"    const requestedPage = parseInt(pm.request.url.query.get(\"page\")) || 0;\r",
							"    pm.expect(res.number).to.equal(requestedPage);\r",
							"});\r",
							"\r",
							"// 7. Image URL validation\r",
							"pm.test(\"Image URLs are valid\", function () {\r",
							"    const birds = pm.response.json().content;\r",
							"    birds.forEach((bird, index) => {\r",
							"        if (bird.imageUrl) {\r",
							"            pm.expect(bird.imageUrl, `Image URL ${index}`).to.match(/^https?:\\/\\/.+/);\r",
							"        }\r",
							"    });\r",
							"});\r",
							"\r",
							"// 8. Display text matches expected format\r",
							"pm.test(\"Display text is consistent\", function () {\r",
							"    const birds = pm.response.json().content;\r",
							"    birds.forEach((bird, index) => {\r",
							"        const expected = `${bird.commonName} (${bird.scientificName}) | ${bird.familyName}`;\r",
							"        pm.expect(bird.displayText, `Bird ${index}`).to.equal(expected);\r",
							"    });\r",
							"});\r",
							"\r",
							"// 9. Unique ID check\r",
							"pm.test(\"No duplicate IDs in page results\", function () {\r",
							"    const birds = pm.response.json().content;\r",
							"    const ids = birds.map(b => b.id);\r",
							"    const uniqueIds = [...new Set(ids)];\r",
							"    pm.expect(ids.length).to.equal(uniqueIds.length);\r",
							"});\r",
							"\r",
							"// 10. Store first result for future requests\r",
							"pm.test(\"Store first bird in environment\", function () {\r",
							"    const birds = pm.response.json().content;\r",
							"    if (birds.length > 0) {\r",
							"        pm.environment.set(\"searched_bird_id\", birds[0].id);\r",
							"        pm.environment.set(\"searched_bird_name\", birds[0].commonName);\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/birds?page=1&size=50",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"birds"
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "size",
							"value": "50"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "search by common name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ===== BIRD SEARCH TESTS =====\r",
							"\r",
							"// 1. Basic response validation\r",
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has JSON content type\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"});\r",
							"\r",
							"// 2. Response structure validation\r",
							"pm.test(\"Response returns an array of search results\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    pm.expect(responseData.length).to.be.greaterThan(0);\r",
							"});\r",
							"\r",
							"// 3. Required fields validation\r",
							"pm.test(\"Each bird has all required fields\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    \r",
							"    birds.forEach((bird, index) => {\r",
							"        pm.expect(bird, `Bird at index ${index}`).to.have.property('id');\r",
							"        pm.expect(bird, `Bird at index ${index}`).to.have.property('commonName');\r",
							"        pm.expect(bird, `Bird at index ${index}`).to.have.property('scientificName');\r",
							"        pm.expect(bird, `Bird at index ${index}`).to.have.property('familyName');\r",
							"        pm.expect(bird, `Bird at index ${index}`).to.have.property('imageUrl');\r",
							"        pm.expect(bird, `Bird at index ${index}`).to.have.property('displayText');\r",
							"        pm.expect(bird, `Bird at index ${index}`).to.have.property('searchableText');\r",
							"    });\r",
							"});\r",
							"\r",
							"// 4. Data type validation\r",
							"pm.test(\"All fields have correct data types\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    \r",
							"    birds.forEach((bird, index) => {\r",
							"        pm.expect(bird.id, `Bird ID at index ${index}`).to.be.a('number');\r",
							"        pm.expect(bird.commonName, `Common name at index ${index}`).to.be.a('string');\r",
							"        pm.expect(bird.scientificName, `Scientific name at index ${index}`).to.be.a('string');\r",
							"        pm.expect(bird.familyName, `Family name at index ${index}`).to.be.a('string');\r",
							"        pm.expect(bird.imageUrl, `Image URL at index ${index}`).to.be.a('string');\r",
							"        pm.expect(bird.displayText, `Display text at index ${index}`).to.be.a('string');\r",
							"        pm.expect(bird.searchableText, `Searchable text at index ${index}`).to.be.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"// 5. Data quality checks\r",
							"pm.test(\"Bird IDs are positive numbers\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    \r",
							"    birds.forEach((bird, index) => {\r",
							"        pm.expect(bird.id, `Bird at index ${index}`).to.be.greaterThan(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Names are not empty strings\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    \r",
							"    birds.forEach((bird, index) => {\r",
							"        pm.expect(bird.commonName, `Bird at index ${index}`).to.have.lengthOf.at.least(1);\r",
							"        pm.expect(bird.scientificName, `Bird at index ${index}`).to.have.lengthOf.at.least(1);\r",
							"        pm.expect(bird.familyName, `Bird at index ${index}`).to.have.lengthOf.at.least(1);\r",
							"    });\r",
							"});\r",
							"\r",
							"// 6. Search functionality validation - CRITICAL TEST\r",
							"pm.test(\"All results match search query 'swan'\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    const query = \"swan\";\r",
							"    \r",
							"    birds.forEach((bird, index) => {\r",
							"        const matches = bird.searchableText.toLowerCase().includes(query) ||\r",
							"                       bird.commonName.toLowerCase().includes(query) ||\r",
							"                       bird.scientificName.toLowerCase().includes(query);\r",
							"        \r",
							"        pm.expect(matches, `Bird \"${bird.commonName}\" should match query \"${query}\"`).to.be.true;\r",
							"    });\r",
							"});\r",
							"\r",
							"// 7. Limit parameter validation\r",
							"pm.test(\"Results respect limit parameter\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    const requestedLimit = parseInt(pm.request.url.query.get('limit')) || 5;\r",
							"    \r",
							"    pm.expect(birds.length).to.be.at.most(requestedLimit);\r",
							"    \r",
							"    // Additional check: if fewer results than limit, that's fine too\r",
							"    if (birds.length < requestedLimit) {\r",
							"        console.log(`Found ${birds.length} results (less than limit of ${requestedLimit})`);\r",
							"    }\r",
							"});\r",
							"\r",
							"// 8. Image URL validation\r",
							"pm.test(\"Image URLs are valid format\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    \r",
							"    birds.forEach((bird, index) => {\r",
							"        if (bird.imageUrl && bird.imageUrl !== '') {\r",
							"            pm.expect(bird.imageUrl, `Bird at index ${index}`).to.match(/^https?:\\/\\//);\r",
							"            pm.expect(bird.imageUrl, `Bird at index ${index}`).to.include('wikimedia'); // Common source\r",
							"        }\r",
							"    });\r",
							"});\r",
							"\r",
							"// 9. Display text format validation\r",
							"pm.test(\"Display text follows expected format\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    \r",
							"    birds.forEach((bird, index) => {\r",
							"        const expectedFormat = `${bird.commonName} (${bird.scientificName}) | ${bird.familyName}`;\r",
							"        pm.expect(bird.displayText, `Bird at index ${index}`).to.equal(expectedFormat);\r",
							"    });\r",
							"});\r",
							"\r",
							"// 10. Searchable text validation\r",
							"pm.test(\"Searchable text contains relevant terms\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    \r",
							"    birds.forEach((bird, index) => {\r",
							"        pm.expect(bird.searchableText.toLowerCase(), `Bird at index ${index}`).to.include(bird.commonName.toLowerCase());\r",
							"        pm.expect(bird.searchableText.toLowerCase(), `Bird at index ${index}`).to.include(bird.scientificName.toLowerCase());\r",
							"        pm.expect(bird.searchableText.toLowerCase(), `Bird at index ${index}`).to.include(bird.familyName.toLowerCase());\r",
							"    });\r",
							"});\r",
							"\r",
							"// 11. Performance test\r",
							"pm.test(\"Search response time under 2 seconds\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// 12. Store search results for potential future tests\r",
							"pm.test(\"Store search results for reference\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    \r",
							"    if (birds.length > 0) {\r",
							"        const firstBird = birds[0];\r",
							"        pm.environment.set(\"searched_bird_id\", firstBird.id);\r",
							"        pm.environment.set(\"searched_bird_name\", firstBird.commonName);\r",
							"        pm.environment.set(\"search_query\", \"swan\");\r",
							"        console.log(\"First search result:\", firstBird.commonName);\r",
							"    }\r",
							"    \r",
							"    pm.environment.set(\"search_results_count\", birds.length);\r",
							"});\r",
							"\r",
							"// 13. Unique ID validation\r",
							"pm.test(\"No duplicate bird IDs in results\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    const birdIds = birds.map(bird => bird.id);\r",
							"    const uniqueIds = [...new Set(birdIds)];\r",
							"    \r",
							"    pm.expect(birdIds.length).to.equal(uniqueIds.length);\r",
							"});\r",
							"\r",
							"// 14. Family consistency validation\r",
							"pm.test(\"All results belong to Anatidae family\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    \r",
							"    birds.forEach((bird, index) => {\r",
							"        pm.expect(bird.familyName, `Bird at index ${index}`).to.equal(\"Anatidae\");\r",
							"    });\r",
							"});\r",
							"\r",
							"// 15. Scientific name validation\r",
							"pm.test(\"Scientific names follow taxonomy format\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    \r",
							"    birds.forEach((bird, index) => {\r",
							"        // Scientific names should be \"Genus species\" format\r",
							"        pm.expect(bird.scientificName, `Bird at index ${index}`).to.match(/^[A-Z][a-z]+\\s[a-z]+$/);\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/birds/search?query=swan&limit=5",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"birds",
						"search"
					],
					"query": [
						{
							"key": "query",
							"value": "swan"
						},
						{
							"key": "limit",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get bird by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ===== SINGLE BIRD TESTS =====\r",
							"\r",
							"// 1. Basic response validation\r",
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has JSON content type\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is under 2 seconds\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// 2. Structure validation\r",
							"pm.test(\"Response contains all required fields\", function () {\r",
							"    const bird = pm.response.json();\r",
							"    [\r",
							"        \"id\", \"commonName\", \"scientificName\", \"familyName\",\r",
							"        \"imageUrl\", \"displayText\", \"searchableText\"\r",
							"    ].forEach(field => {\r",
							"        pm.expect(bird).to.have.property(field);\r",
							"    });\r",
							"});\r",
							"\r",
							"// 3. Data type validation\r",
							"pm.test(\"Bird fields have correct types\", function () {\r",
							"    const bird = pm.response.json();\r",
							"    pm.expect(bird.id).to.be.a(\"number\");\r",
							"    pm.expect(bird.commonName).to.be.a(\"string\");\r",
							"    pm.expect(bird.scientificName).to.be.a(\"string\");\r",
							"    pm.expect(bird.familyName).to.be.a(\"string\");\r",
							"    pm.expect(bird.imageUrl).to.be.a(\"string\");\r",
							"    pm.expect(bird.displayText).to.be.a(\"string\");\r",
							"    pm.expect(bird.searchableText).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"// 4. Data quality checks\r",
							"pm.test(\"Bird ID matches requested ID\", function () {\r",
							"    const bird = pm.response.json();\r",
							"    const requestedId = parseInt(pm.request.url.path.slice(-1)[0]); // last path segment\r",
							"    pm.expect(bird.id).to.equal(requestedId);\r",
							"});\r",
							"\r",
							"pm.test(\"Names are not empty\", function () {\r",
							"    const bird = pm.response.json();\r",
							"    pm.expect(bird.commonName).to.have.lengthOf.at.least(1);\r",
							"    pm.expect(bird.scientificName).to.have.lengthOf.at.least(1);\r",
							"    pm.expect(bird.familyName).to.have.lengthOf.at.least(1);\r",
							"});\r",
							"\r",
							"// 5. Image URL validation\r",
							"pm.test(\"Image URL is valid\", function () {\r",
							"    const bird = pm.response.json();\r",
							"    if (bird.imageUrl) {\r",
							"        pm.expect(bird.imageUrl).to.match(/^https?:\\/\\/.+/);\r",
							"    }\r",
							"});\r",
							"\r",
							"// 6. Display text format validation\r",
							"pm.test(\"Display text matches expected format\", function () {\r",
							"    const bird = pm.response.json();\r",
							"    const expected = `${bird.commonName} (${bird.scientificName}) | ${bird.familyName}`;\r",
							"    pm.expect(bird.displayText).to.equal(expected);\r",
							"});\r",
							"\r",
							"// 7. Save bird details for future use\r",
							"pm.test(\"Store bird details in environment\", function () {\r",
							"    const bird = pm.response.json();\r",
							"    pm.environment.set(\"bird_id\", bird.id);\r",
							"    pm.environment.set(\"bird_name\", bird.commonName);\r",
							"    pm.environment.set(\"bird_scientific\", bird.scientificName);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/birds/350",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"birds",
						"350"
					]
				}
			},
			"response": []
		},
		{
			"name": "search by scientific name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ===== BIRD SEARCH TESTS =====\r",
							"\r",
							"// 1. Basic response validation\r",
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has JSON content type\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"});\r",
							"\r",
							"// 2. Response structure validation\r",
							"pm.test(\"Response returns an array of search results\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    pm.expect(responseData.length).to.equal(5); // Exactly 5 results\r",
							"});\r",
							"\r",
							"// 3. Required fields validation\r",
							"pm.test(\"Each bird has all required fields\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    \r",
							"    birds.forEach((bird, index) => {\r",
							"        pm.expect(bird, `Bird at index ${index}`).to.have.property('id');\r",
							"        pm.expect(bird, `Bird at index ${index}`).to.have.property('commonName');\r",
							"        pm.expect(bird, `Bird at index ${index}`).to.have.property('scientificName');\r",
							"        pm.expect(bird, `Bird at index ${index}`).to.have.property('familyName');\r",
							"        pm.expect(bird, `Bird at index ${index}`).to.have.property('imageUrl');\r",
							"        pm.expect(bird, `Bird at index ${index}`).to.have.property('displayText');\r",
							"        pm.expect(bird, `Bird at index ${index}`).to.have.property('searchableText');\r",
							"    });\r",
							"});\r",
							"\r",
							"// 4. Scientific name search validation - CRITICAL TEST\r",
							"pm.test(\"All results contain 'Dendrocopos' in scientific name\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    const query = \"dendrocopos\";\r",
							"    \r",
							"    birds.forEach((bird, index) => {\r",
							"        const hasScientificMatch = bird.scientificName.toLowerCase().includes(query);\r",
							"        const hasSearchableMatch = bird.searchableText.toLowerCase().includes(query);\r",
							"        \r",
							"        pm.expect(hasScientificMatch || hasSearchableMatch, \r",
							"                 `Bird \"${bird.commonName}\" should contain \"${query}\"`).to.be.true;\r",
							"    });\r",
							"});\r",
							"\r",
							"// 5. Limit parameter validation - PERFECT MATCH\r",
							"pm.test(\"Exactly 5 results returned (limit reached)\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    const requestedLimit = 5;\r",
							"    \r",
							"    pm.expect(birds.length).to.equal(requestedLimit);\r",
							"    console.log(`Perfect! Found exactly ${requestedLimit} results`);\r",
							"});\r",
							"\r",
							"// 6. Woodpecker family validation\r",
							"pm.test(\"All results belong to Picidae family (woodpeckers)\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    \r",
							"    birds.forEach((bird, index) => {\r",
							"        pm.expect(bird.familyName, `Bird at index ${index}`).to.equal(\"Picidae\");\r",
							"    });\r",
							"});\r",
							"\r",
							"// 7. Data quality checks\r",
							"pm.test(\"Bird data quality validation\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    \r",
							"    birds.forEach((bird, index) => {\r",
							"        pm.expect(bird.id, `Bird at index ${index}`).to.be.a('number').and.to.be.greaterThan(0);\r",
							"        pm.expect(bird.commonName, `Bird at index ${index}`).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
							"        pm.expect(bird.scientificName, `Bird at index ${index}`).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
							"        pm.expect(bird.familyName, `Bird at index ${index}`).to.be.a('string').and.to.have.lengthOf.at.least(1);\r",
							"    });\r",
							"});\r",
							"\r",
							"// 8. Image URL validation\r",
							"pm.test(\"Image URLs are valid format\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    \r",
							"    birds.forEach((bird, index) => {\r",
							"        if (bird.imageUrl && bird.imageUrl !== '') {\r",
							"            pm.expect(bird.imageUrl, `Bird at index ${index}`).to.match(/^https?:\\/\\//);\r",
							"            pm.expect(bird.imageUrl, `Bird at index ${index}`).to.include('wikimedia'); // Common source\r",
							"        }\r",
							"    });\r",
							"});\r",
							"\r",
							"// 9. Display text format validation\r",
							"pm.test(\"Display text follows expected format\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    \r",
							"    birds.forEach((bird, index) => {\r",
							"        const expectedFormat = `${bird.commonName} (${bird.scientificName}) | ${bird.familyName}`;\r",
							"        pm.expect(bird.displayText, `Bird at index ${index}`).to.equal(expectedFormat);\r",
							"    });\r",
							"});\r",
							"\r",
							"// 10. Searchable text validation\r",
							"pm.test(\"Searchable text contains relevant terms\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    \r",
							"    birds.forEach((bird, index) => {\r",
							"        pm.expect(bird.searchableText.toLowerCase(), `Bird at index ${index}`).to.include(\"dendrocopos\");\r",
							"        pm.expect(bird.searchableText.toLowerCase(), `Bird at index ${index}`).to.include(\"woodpecker\");\r",
							"        pm.expect(bird.searchableText.toLowerCase(), `Bird at index ${index}`).to.include(\"picidae\");\r",
							"    });\r",
							"});\r",
							"\r",
							"// 11. Performance test\r",
							"pm.test(\"Search response time under 2 seconds\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// 12. Store search results for potential future tests\r",
							"pm.test(\"Store search results for reference\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    \r",
							"    if (birds.length > 0) {\r",
							"        const firstBird = birds[0];\r",
							"        pm.environment.set(\"searched_bird_id\", firstBird.id);\r",
							"        pm.environment.set(\"searched_bird_name\", firstBird.commonName);\r",
							"        pm.environment.set(\"search_query\", \"Dendrocopos\");\r",
							"        console.log(\"First search result:\", firstBird.commonName);\r",
							"    }\r",
							"    \r",
							"    pm.environment.set(\"search_results_count\", birds.length);\r",
							"    console.log(`Found ${birds.length} woodpecker species`);\r",
							"});\r",
							"\r",
							"// 13. Unique ID validation\r",
							"pm.test(\"No duplicate bird IDs in results\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    const birdIds = birds.map(bird => bird.id);\r",
							"    const uniqueIds = [...new Set(birdIds)];\r",
							"    \r",
							"    pm.expect(birdIds.length).to.equal(uniqueIds.length);\r",
							"});\r",
							"\r",
							"// 14. Scientific name pattern validation\r",
							"pm.test(\"Scientific names follow Genus species format\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    \r",
							"    birds.forEach((bird, index) => {\r",
							"        pm.expect(bird.scientificName, `Bird at index ${index}`).to.match(/^Dendrocopos\\s[a-z]+$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"// 15. Common name consistency\r",
							"pm.test(\"All common names contain 'Woodpecker'\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    \r",
							"    birds.forEach((bird, index) => {\r",
							"        pm.expect(bird.commonName.toLowerCase(), `Bird at index ${index}`).to.include(\"woodpecker\");\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/birds/search?query=Dendrocopos&limit=5",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"birds",
						"search"
					],
					"query": [
						{
							"key": "query",
							"value": "Dendrocopos"
						},
						{
							"key": "limit",
							"value": "5"
						},
						{
							"key": "",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Empty bird search (>random birds)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ===== EMPTY SEARCH TESTS =====\r",
							"\r",
							"// 1. Basic response validation\r",
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has JSON content type\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is under 2 seconds\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// 2. Response structure\r",
							"pm.test(\"Response is an array of birds\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    pm.expect(birds).to.be.an(\"array\");\r",
							"    pm.expect(birds.length).to.be.greaterThan(0);\r",
							"});\r",
							"\r",
							"// 3. Limit parameter respected\r",
							"pm.test(\"Response length does not exceed limit\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    const limit = parseInt(pm.request.url.query.get(\"limit\")) || 10;\r",
							"    pm.expect(birds.length).to.be.at.most(limit);\r",
							"});\r",
							"\r",
							"// 4. Field presence & data type validation\r",
							"pm.test(\"Each bird has required fields with correct types\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    birds.forEach((bird, index) => {\r",
							"        pm.expect(bird, `Bird at index ${index}`).to.have.property(\"id\").that.is.a(\"number\");\r",
							"        pm.expect(bird, `Bird at index ${index}`).to.have.property(\"commonName\").that.is.a(\"string\");\r",
							"        pm.expect(bird, `Bird at index ${index}`).to.have.property(\"scientificName\").that.is.a(\"string\");\r",
							"        pm.expect(bird, `Bird at index ${index}`).to.have.property(\"familyName\").that.is.a(\"string\");\r",
							"        pm.expect(bird, `Bird at index ${index}`).to.have.property(\"imageUrl\").that.is.a(\"string\");\r",
							"        pm.expect(bird, `Bird at index ${index}`).to.have.property(\"displayText\").that.is.a(\"string\");\r",
							"        pm.expect(bird, `Bird at index ${index}`).to.have.property(\"searchableText\").that.is.a(\"string\");\r",
							"    });\r",
							"});\r",
							"\r",
							"// 5. Data quality checks\r",
							"pm.test(\"Bird IDs are positive numbers\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    birds.forEach((bird, index) => {\r",
							"        pm.expect(bird.id, `Bird ID at index ${index}`).to.be.greaterThan(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Names are not empty\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    birds.forEach((bird, index) => {\r",
							"        pm.expect(bird.commonName, `Common name at index ${index}`).to.have.lengthOf.at.least(1);\r",
							"        pm.expect(bird.scientificName, `Scientific name at index ${index}`).to.have.lengthOf.at.least(1);\r",
							"        pm.expect(bird.familyName, `Family name at index ${index}`).to.have.lengthOf.at.least(1);\r",
							"    });\r",
							"});\r",
							"\r",
							"// 6. Image URL validation\r",
							"pm.test(\"Image URLs are valid (if present)\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    birds.forEach((bird, index) => {\r",
							"        if (bird.imageUrl) {\r",
							"            pm.expect(bird.imageUrl, `Bird at index ${index}`).to.match(/^https?:\\/\\/.+/);\r",
							"        }\r",
							"    });\r",
							"});\r",
							"\r",
							"// 7. Display text format validation\r",
							"pm.test(\"Display text matches expected format\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    birds.forEach((bird, index) => {\r",
							"        const expected = `${bird.commonName} (${bird.scientificName}) | ${bird.familyName}`;\r",
							"        pm.expect(bird.displayText, `Bird at index ${index}`).to.equal(expected);\r",
							"    });\r",
							"});\r",
							"\r",
							"// 8. Store first bird for later requests\r",
							"pm.test(\"Store first bird data in environment\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    if (birds.length > 0) {\r",
							"        pm.environment.set(\"search_first_bird_id\", birds[0].id);\r",
							"        pm.environment.set(\"search_first_bird_name\", birds[0].commonName);\r",
							"    }\r",
							"});\r",
							"\r",
							"// 9. Unique ID validation\r",
							"pm.test(\"No duplicate IDs in results\", function () {\r",
							"    const birds = pm.response.json();\r",
							"    const ids = birds.map(bird => bird.id);\r",
							"    const unique = [...new Set(ids)];\r",
							"    pm.expect(ids.length).to.equal(unique.length);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/birds/search?limit=5",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"birds",
						"search"
					],
					"query": [
						{
							"key": "limit",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "All Regions",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ===== GET ALL REGIONS TESTS =====\r",
							"\r",
							"// 1. Basic response validation\r",
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has JSON content type\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"});\r",
							"\r",
							"// 2. Response structure validation\r",
							"pm.test(\"Response returns an array of regions\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('array');\r",
							"    pm.expect(responseData.length).to.be.greaterThan(0);\r",
							"});\r",
							"\r",
							"// 3. Region object validation\r",
							"pm.test(\"Each region has required fields\", function () {\r",
							"    const regions = pm.response.json();\r",
							"    \r",
							"    regions.forEach((region, index) => {\r",
							"        pm.expect(region, `Region at index ${index}`).to.be.an('object');\r",
							"        pm.expect(region, `Region at index ${index}`).to.have.property('id');\r",
							"        pm.expect(region, `Region at index ${index}`).to.have.property('name');\r",
							"    });\r",
							"});\r",
							"\r",
							"// 4. Data type validation\r",
							"pm.test(\"All fields have correct data types\", function () {\r",
							"    const regions = pm.response.json();\r",
							"    \r",
							"    regions.forEach((region, index) => {\r",
							"        pm.expect(region.id, `Region ID at index ${index}`).to.be.a('number');\r",
							"        pm.expect(region.name, `Region name at index ${index}`).to.be.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"// 5. Data quality checks\r",
							"pm.test(\"Region IDs are positive numbers\", function () {\r",
							"    const regions = pm.response.json();\r",
							"    \r",
							"    regions.forEach((region, index) => {\r",
							"        pm.expect(region.id, `Region at index ${index}`).to.be.greaterThan(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Region names are not empty\", function () {\r",
							"    const regions = pm.response.json();\r",
							"    \r",
							"    regions.forEach((region, index) => {\r",
							"        pm.expect(region.name, `Region at index ${index}`).to.have.lengthOf.at.least(1);\r",
							"        pm.expect(region.name.trim(), `Region at index ${index}`).to.not.be.empty;\r",
							"    });\r",
							"});\r",
							"\r",
							"// 6. Unique ID validation\r",
							"pm.test(\"No duplicate region IDs\", function () {\r",
							"    const regions = pm.response.json();\r",
							"    const regionIds = regions.map(region => region.id);\r",
							"    const uniqueIds = [...new Set(regionIds)];\r",
							"    \r",
							"    pm.expect(regionIds.length).to.equal(uniqueIds.length);\r",
							"});\r",
							"\r",
							"// 7. Performance test\r",
							"pm.test(\"Response time under 2 seconds\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// 8. Store regions for potential future tests\r",
							"pm.test(\"Store region data for reference\", function () {\r",
							"    const regions = pm.response.json();\r",
							"    \r",
							"    if (regions.length > 0) {\r",
							"        const firstRegion = regions[0];\r",
							"        pm.environment.set(\"first_region_id\", firstRegion.id);\r",
							"        pm.environment.set(\"first_region_name\", firstRegion.name);\r",
							"        console.log(\"First region:\", firstRegion.name);\r",
							"    }\r",
							"    \r",
							"    pm.environment.set(\"total_regions\", regions.length);\r",
							"    console.log(\"Total regions:\", regions.length);\r",
							"});\r",
							"\r",
							"// 9. Specific region validation (optional)\r",
							"pm.test(\"Contains expected Greek regions\", function () {\r",
							"    const regions = pm.response.json();\r",
							"    const regionNames = regions.map(region => region.name);\r",
							"    \r",
							"    // Check for some expected Greek regions\r",
							"    const expectedRegions = [\"Attica\", \"Central Macedonia\", \"Crete\", \"Epirus\"];\r",
							"    \r",
							"    expectedRegions.forEach(regionName => {\r",
							"        pm.expect(regionNames).to.include(regionName);\r",
							"    });\r",
							"});\r",
							"\r",
							"// 10. Alphabetical order check (if your backend sorts them)\r",
							"pm.test(\"Regions are sorted alphabetically\", function () {\r",
							"    const regions = pm.response.json();\r",
							"    const regionNames = regions.map(region => region.name);\r",
							"    const sortedNames = [...regionNames].sort();\r",
							"    \r",
							"    pm.expect(regionNames).to.eql(sortedNames);\r",
							"});\r",
							"\r",
							"// 11. Response size validation\r",
							"pm.test(\"Returns reasonable number of regions\", function () {\r",
							"    const regions = pm.response.json();\r",
							"    // Greece has 13 administrative regions + maybe subdivisions\r",
							"    pm.expect(regions.length).to.be.within(5, 20);\r",
							"});\r",
							"\r",
							"// 12. No pagination validation (simple array response)\r",
							"pm.test(\"Response is simple array (not paginated)\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    // Should NOT have pagination properties\r",
							"    pm.expect(responseData).to.not.have.property('content');\r",
							"    pm.expect(responseData).to.not.have.property('pageable');\r",
							"    pm.expect(responseData).to.not.have.property('totalPages');\r",
							"    pm.expect(Array.isArray(responseData)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/regions",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"regions"
					]
				}
			},
			"response": []
		},
		{
			"name": "filter regions by name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ===== REGION FILTER TESTS =====\r",
							"\r",
							"// 1. Basic response validation\r",
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has JSON content type\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is under 2 seconds\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// 2. Structure validation\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    const regions = pm.response.json();\r",
							"    pm.expect(regions).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"// 3. Each region has required fields\r",
							"pm.test(\"Each region has id and name\", function () {\r",
							"    const regions = pm.response.json();\r",
							"    regions.forEach((region, index) => {\r",
							"        pm.expect(region, `Region at index ${index}`).to.have.property(\"id\").that.is.a(\"number\");\r",
							"        pm.expect(region, `Region at index ${index}`).to.have.property(\"name\").that.is.a(\"string\");\r",
							"    });\r",
							"});\r",
							"\r",
							"// 4. Name filter works correctly\r",
							"pm.test(\"Region names contain filter term\", function () {\r",
							"    const regions = pm.response.json();\r",
							"    const query = pm.request.url.query.get(\"name\").toLowerCase();\r",
							"    regions.forEach((region, index) => {\r",
							"        pm.expect(region.name.toLowerCase(), `Region at index ${index}`).to.include(query);\r",
							"    });\r",
							"});\r",
							"\r",
							"// 5. Region IDs are positive and unique\r",
							"pm.test(\"Region IDs are unique and positive\", function () {\r",
							"    const regions = pm.response.json();\r",
							"    const ids = regions.map(r => r.id);\r",
							"    const unique = [...new Set(ids)];\r",
							"    pm.expect(ids.length).to.equal(unique.length);\r",
							"    ids.forEach((id, index) => {\r",
							"        pm.expect(id, `Region ID at index ${index}`).to.be.greaterThan(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"// 6. Save first region for later use\r",
							"pm.test(\"Store first region in environment\", function () {\r",
							"    const regions = pm.response.json();\r",
							"    if (regions.length > 0) {\r",
							"        pm.environment.set(\"region_id\", regions[0].id);\r",
							"        pm.environment.set(\"region_name\", regions[0].name);\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/regions/filter?name=Att",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"regions",
						"filter"
					],
					"query": [
						{
							"key": "name",
							"value": "Att"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get regions by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ===== REGION BY ID TESTS =====\r",
							"\r",
							"// 1. Basic response validation\r",
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has JSON content type\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is under 2 seconds\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// 2. Structure validation\r",
							"pm.test(\"Response is an object with required fields\", function () {\r",
							"    const region = pm.response.json();\r",
							"    pm.expect(region).to.be.an(\"object\");\r",
							"    pm.expect(region).to.have.property(\"id\").that.is.a(\"number\");\r",
							"    pm.expect(region).to.have.property(\"name\").that.is.a(\"string\");\r",
							"});\r",
							"\r",
							"// 3. ID matches the requested one\r",
							"pm.test(\"Returned region ID matches request\", function () {\r",
							"    const region = pm.response.json();\r",
							"    const requestedId = parseInt(pm.request.url.path.slice(-1)[0]); // last segment of URL\r",
							"    pm.expect(region.id).to.equal(requestedId);\r",
							"});\r",
							"\r",
							"// 4. Region ID is positive\r",
							"pm.test(\"Region ID is a positive number\", function () {\r",
							"    const region = pm.response.json();\r",
							"    pm.expect(region.id).to.be.greaterThan(0);\r",
							"});\r",
							"\r",
							"// 5. Region name is not empty\r",
							"pm.test(\"Region name is not empty\", function () {\r",
							"    const region = pm.response.json();\r",
							"    pm.expect(region.name).to.have.lengthOf.at.least(1);\r",
							"});\r",
							"\r",
							"// 6. Save region for later use\r",
							"pm.test(\"Store region in environment\", function () {\r",
							"    const region = pm.response.json();\r",
							"    pm.environment.set(\"region_id\", region.id);\r",
							"    pm.environment.set(\"region_name\", region.name);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/regions/1",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"regions",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "get family by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ===== GET FAMILY BY ID TESTS =====\r",
							"\r",
							"// 1. Basic response validation\r",
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has JSON content type\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"});\r",
							"\r",
							"// 2. Response structure validation\r",
							"pm.test(\"Response returns a single family object\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.not.be.an('array');\r",
							"});\r",
							"\r",
							"// 3. Required fields validation\r",
							"pm.test(\"Family has all required fields\", function () {\r",
							"    const family = pm.response.json();\r",
							"    \r",
							"    pm.expect(family).to.have.property('id');\r",
							"    pm.expect(family).to.have.property('name');\r",
							"});\r",
							"\r",
							"// 4. Data type validation\r",
							"pm.test(\"All fields have correct data types\", function () {\r",
							"    const family = pm.response.json();\r",
							"    \r",
							"    pm.expect(family.id).to.be.a('number');\r",
							"    pm.expect(family.name).to.be.a('string');\r",
							"});\r",
							"\r",
							"// 5. Data quality checks\r",
							"pm.test(\"Family ID is positive number\", function () {\r",
							"    const family = pm.response.json();\r",
							"    pm.expect(family.id).to.be.greaterThan(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Family name is not empty\", function () {\r",
							"    const family = pm.response.json();\r",
							"    pm.expect(family.name).to.have.lengthOf.at.least(1);\r",
							"    pm.expect(family.name.trim()).to.not.be.empty;\r",
							"});\r",
							"\r",
							"// 6. URL parameter validation\r",
							"pm.test(\"Response ID matches requested ID\", function () {\r",
							"    const family = pm.response.json();\r",
							"    const requestedId = pm.request.url.path.pop(); // Get the ID from URL\r",
							"    \r",
							"    pm.expect(family.id.toString()).to.equal(requestedId);\r",
							"});\r",
							"\r",
							"// 7. Specific content validation\r",
							"pm.test(\"Family is Sulidae (gannets and boobies)\", function () {\r",
							"    const family = pm.response.json();\r",
							"    \r",
							"    pm.expect(family.id).to.equal(20);\r",
							"    pm.expect(family.name).to.equal(\"Sulidae\");\r",
							"});\r",
							"\r",
							"// 8. Performance test\r",
							"pm.test(\"Response time under 1 second\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"// 9. Store family data for potential future tests\r",
							"pm.test(\"Store family data for reference\", function () {\r",
							"    const family = pm.response.json();\r",
							"    \r",
							"    pm.environment.set(\"family_id\", family.id);\r",
							"    pm.environment.set(\"family_name\", family.name);\r",
							"    console.log(\"Family:\", family.name, \"(ID:\", family.id + \")\");\r",
							"});\r",
							"\r",
							"// 10. No extra fields validation\r",
							"pm.test(\"Response has only id and name fields\", function () {\r",
							"    const family = pm.response.json();\r",
							"    const fieldCount = Object.keys(family).length;\r",
							"    \r",
							"    pm.expect(fieldCount).to.equal(2);\r",
							"    pm.expect(family).to.not.have.property('description');\r",
							"    pm.expect(family).to.not.have.property('speciesCount');\r",
							"    pm.expect(family).to.not.have.property('imageUrl');\r",
							"});\r",
							"\r",
							"// 11. Taxonomic validation (optional)\r",
							"pm.test(\"Sulidae is a valid bird family\", function () {\r",
							"    const family = pm.response.json();\r",
							"    \r",
							"    // Sulidae is the family for gannets and boobies\r",
							"    const validFamilyNames = [\"Sulidae\", \"Anatidae\", \"Accipitridae\", \"Picidae\", \"Turdidae\"];\r",
							"    pm.expect(validFamilyNames).to.include(family.name);\r",
							"});\r",
							"\r",
							"// 12. Case sensitivity validation\r",
							"pm.test(\"Family name has proper capitalization\", function () {\r",
							"    const family = pm.response.json();\r",
							"    \r",
							"    // Family names should be properly capitalized (Sulidae, not sulidae)\r",
							"    pm.expect(family.name).to.match(/^[A-Z]/);\r",
							"    pm.expect(family.name).to.not.equal(family.name.toLowerCase());\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/families/20",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"families",
						"20"
					]
				}
			},
			"response": []
		},
		{
			"name": "get families paginated",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ===== FAMILIES PAGINATED TESTS =====\r",
							"\r",
							"// 1. Basic response validation\r",
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has JSON content type\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is under 2 seconds\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// 2. Structure validation\r",
							"pm.test(\"Response has correct structure\", function () {\r",
							"    const data = pm.response.json();\r",
							"    pm.expect(data).to.have.property(\"content\").that.is.an(\"array\");\r",
							"    pm.expect(data).to.have.property(\"pageable\").that.is.an(\"object\");\r",
							"    pm.expect(data).to.have.property(\"totalPages\").that.is.a(\"number\");\r",
							"    pm.expect(data).to.have.property(\"totalElements\").that.is.a(\"number\");\r",
							"    pm.expect(data).to.have.property(\"first\").that.is.a(\"boolean\");\r",
							"    pm.expect(data).to.have.property(\"last\").that.is.a(\"boolean\");\r",
							"});\r",
							"\r",
							"// 3. Families validation\r",
							"pm.test(\"Each family has required fields\", function () {\r",
							"    const families = pm.response.json().content;\r",
							"    families.forEach((family, index) => {\r",
							"        pm.expect(family, `Family at index ${index}`).to.be.an(\"object\");\r",
							"        pm.expect(family).to.have.property(\"id\").that.is.a(\"number\");\r",
							"        pm.expect(family).to.have.property(\"name\").that.is.a(\"string\");\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Family IDs are positive numbers\", function () {\r",
							"    const families = pm.response.json().content;\r",
							"    families.forEach((family, index) => {\r",
							"        pm.expect(family.id, `Family ID at index ${index}`).to.be.greaterThan(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Family names are not empty\", function () {\r",
							"    const families = pm.response.json().content;\r",
							"    families.forEach((family, index) => {\r",
							"        pm.expect(family.name, `Family name at index ${index}`).to.have.lengthOf.at.least(1);\r",
							"    });\r",
							"});\r",
							"\r",
							"// 4. Pagination checks\r",
							"pm.test(\"Page size matches requested size\", function () {\r",
							"    const data = pm.response.json();\r",
							"    const requestedSize = parseInt(pm.request.url.query.get(\"size\"));\r",
							"    pm.expect(data.content.length).to.be.at.most(requestedSize);\r",
							"    pm.expect(data.size).to.equal(requestedSize);\r",
							"});\r",
							"\r",
							"pm.test(\"Page number matches requested page\", function () {\r",
							"    const data = pm.response.json();\r",
							"    const requestedPage = parseInt(pm.request.url.query.get(\"page\"));\r",
							"    pm.expect(data.number).to.equal(requestedPage);\r",
							"});\r",
							"\r",
							"// 5. Uniqueness check\r",
							"pm.test(\"No duplicate family IDs on this page\", function () {\r",
							"    const families = pm.response.json().content;\r",
							"    const ids = families.map(f => f.id);\r",
							"    const uniqueIds = [...new Set(ids)];\r",
							"    pm.expect(ids.length).to.equal(uniqueIds.length);\r",
							"});\r",
							"\r",
							"// 6. Store first family for later use\r",
							"pm.test(\"Store first family in environment\", function () {\r",
							"    const families = pm.response.json().content;\r",
							"    if (families.length > 0) {\r",
							"        pm.environment.set(\"family_id\", families[0].id);\r",
							"        pm.environment.set(\"family_name\", families[0].name);\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/families/paginated?page=0&size=5",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"families",
						"paginated"
					],
					"query": [
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "size",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get my logs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has JSON content type\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has expected structure\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    \r",
							"    // Root pagination checks\r",
							"    pm.expect(jsonData).to.have.property(\"content\").that.is.an(\"array\");\r",
							"    pm.expect(jsonData).to.have.property(\"pageable\");\r",
							"    pm.expect(jsonData).to.have.property(\"totalElements\").that.is.a(\"number\");\r",
							"    pm.expect(jsonData).to.have.property(\"totalPages\").that.is.a(\"number\");\r",
							"    \r",
							"    if (jsonData.content.length > 0) {\r",
							"        const log = jsonData.content[0];\r",
							"        \r",
							"        // Core log fields\r",
							"        pm.expect(log).to.have.property(\"id\").that.is.a(\"number\");\r",
							"        pm.expect(log).to.have.property(\"quantity\").that.is.a(\"number\");\r",
							"        pm.expect(log).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
							"        pm.expect(log).to.have.property(\"updatedAt\").that.is.a(\"string\");\r",
							"        \r",
							"        // Bird object\r",
							"        pm.expect(log).to.have.property(\"bird\").that.is.an(\"object\");\r",
							"        pm.expect(log.bird).to.have.property(\"id\");\r",
							"        pm.expect(log.bird).to.have.property(\"name\");\r",
							"        pm.expect(log.bird).to.have.property(\"scientificName\");\r",
							"        pm.expect(log.bird).to.have.property(\"family\");\r",
							"        pm.expect(log.bird).to.have.property(\"imageUrl\");\r",
							"        \r",
							"        // Region object\r",
							"        pm.expect(log).to.have.property(\"region\").that.is.an(\"object\");\r",
							"        pm.expect(log.region).to.have.property(\"id\");\r",
							"        pm.expect(log.region).to.have.property(\"name\");\r",
							"        \r",
							"        // User object\r",
							"        pm.expect(log).to.have.property(\"user\").that.is.an(\"object\");\r",
							"        pm.expect(log.user).to.have.property(\"id\");\r",
							"        pm.expect(log.user).to.have.property(\"username\");\r",
							"        pm.expect(log.user).to.have.property(\"email\");\r",
							"        pm.expect(log.user).to.have.property(\"firstname\");\r",
							"        pm.expect(log.user).to.have.property(\"lastname\");\r",
							"        pm.expect(log.user).to.have.property(\"role\");\r",
							"        \r",
							"        // User profileDetails\r",
							"        pm.expect(log.user).to.have.property(\"profileDetails\").that.is.an(\"object\");\r",
							"        pm.expect(log.user.profileDetails).to.have.property(\"dateOfBirth\");\r",
							"        pm.expect(log.user.profileDetails).to.have.property(\"gender\");\r",
							"    }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/bwlogs/my-logs",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"bwlogs",
						"my-logs"
					]
				}
			},
			"response": []
		},
		{
			"name": "get log by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ===== GET BIRD WATCHING LOG TESTS =====\r",
							"\r",
							"// 1. Basic response validation\r",
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has JSON content type\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"});\r",
							"\r",
							"// 2. Response structure validation\r",
							"pm.test(\"Response returns a single log object\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.not.be.an('array');\r",
							"});\r",
							"\r",
							"// 3. Required fields validation\r",
							"pm.test(\"Log has all required fields\", function () {\r",
							"    const log = pm.response.json();\r",
							"    \r",
							"    pm.expect(log).to.have.property('id');\r",
							"    pm.expect(log).to.have.property('bird');\r",
							"    pm.expect(log).to.have.property('quantity');\r",
							"    pm.expect(log).to.have.property('region');\r",
							"    pm.expect(log).to.have.property('user');\r",
							"    pm.expect(log).to.have.property('createdAt');\r",
							"    pm.expect(log).to.have.property('updatedAt');\r",
							"});\r",
							"\r",
							"// 4. URL parameter validation\r",
							"pm.test(\"Response ID matches requested ID\", function () {\r",
							"    const log = pm.response.json();\r",
							"    const requestedId = pm.request.url.path.pop(); // Get the ID from URL\r",
							"    \r",
							"    pm.expect(log.id.toString()).to.equal(requestedId);\r",
							"});\r",
							"\r",
							"// 5. Bird object validation\r",
							"pm.test(\"Bird object has correct structure\", function () {\r",
							"    const log = pm.response.json();\r",
							"    \r",
							"    pm.expect(log.bird).to.have.property('id');\r",
							"    pm.expect(log.bird).to.have.property('name');\r",
							"    pm.expect(log.bird).to.have.property('scientificName');\r",
							"    pm.expect(log.bird).to.have.property('family');\r",
							"    pm.expect(log.bird).to.have.property('imageUrl');\r",
							"    \r",
							"    pm.expect(log.bird.family).to.have.property('id');\r",
							"    pm.expect(log.bird.family).to.have.property('name');\r",
							"});\r",
							"\r",
							"// 6. Region object validation\r",
							"pm.test(\"Region object has correct structure\", function () {\r",
							"    const log = pm.response.json();\r",
							"    \r",
							"    pm.expect(log.region).to.have.property('id');\r",
							"    pm.expect(log.region).to.have.property('name');\r",
							"});\r",
							"\r",
							"// 7. User object validation\r",
							"pm.test(\"User object has correct structure\", function () {\r",
							"    const log = pm.response.json();\r",
							"    \r",
							"    pm.expect(log.user).to.have.property('id');\r",
							"    pm.expect(log.user).to.have.property('username');\r",
							"    pm.expect(log.user).to.have.property('email');\r",
							"    pm.expect(log.user).to.have.property('firstname');\r",
							"    pm.expect(log.user).to.have.property('lastname');\r",
							"    pm.expect(log.user).to.have.property('role');\r",
							"    pm.expect(log.user).to.have.property('isActive');\r",
							"    pm.expect(log.user).to.have.property('profileDetails');\r",
							"    \r",
							"    pm.expect(log.user.profileDetails).to.have.property('dateOfBirth');\r",
							"    pm.expect(log.user.profileDetails).to.have.property('gender');\r",
							"});\r",
							"\r",
							"// 8. Data type validation\r",
							"pm.test(\"All fields have correct data types\", function () {\r",
							"    const log = pm.response.json();\r",
							"    \r",
							"    pm.expect(log.id).to.be.a('number');\r",
							"    pm.expect(log.quantity).to.be.a('number');\r",
							"    pm.expect(log.createdAt).to.be.a('string');\r",
							"    pm.expect(log.updatedAt).to.be.a('string');\r",
							"    \r",
							"    pm.expect(log.bird.id).to.be.a('number');\r",
							"    pm.expect(log.bird.name).to.be.a('string');\r",
							"    pm.expect(log.bird.scientificName).to.be.a('string');\r",
							"    pm.expect(log.bird.imageUrl).to.be.a('string');\r",
							"    \r",
							"    pm.expect(log.region.id).to.be.a('number');\r",
							"    pm.expect(log.region.name).to.be.a('string');\r",
							"    \r",
							"    pm.expect(log.user.id).to.be.a('number');\r",
							"    pm.expect(log.user.username).to.be.a('string');\r",
							"    pm.expect(log.user.email).to.be.a('string');\r",
							"});\r",
							"\r",
							"// 9. Data quality checks\r",
							"pm.test(\"IDs are positive numbers\", function () {\r",
							"    const log = pm.response.json();\r",
							"    \r",
							"    pm.expect(log.id).to.be.greaterThan(0);\r",
							"    pm.expect(log.bird.id).to.be.greaterThan(0);\r",
							"    pm.expect(log.region.id).to.be.greaterThan(0);\r",
							"    pm.expect(log.user.id).to.be.greaterThan(0);\r",
							"    pm.expect(log.bird.family.id).to.be.greaterThan(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Quantity is positive number\", function () {\r",
							"    const log = pm.response.json();\r",
							"    pm.expect(log.quantity).to.be.greaterThan(0);\r",
							"});\r",
							"\r",
							"// 10. Timestamp validation\r",
							"pm.test(\"Timestamps are valid ISO dates\", function () {\r",
							"    const log = pm.response.json();\r",
							"    \r",
							"    pm.expect(new Date(log.createdAt).toString()).to.not.equal('Invalid Date');\r",
							"    pm.expect(new Date(log.updatedAt).toString()).to.not.equal('Invalid Date');\r",
							"    \r",
							"    // UpdatedAt should be equal or after createdAt\r",
							"    const createdAt = new Date(log.createdAt);\r",
							"    const updatedAt = new Date(log.updatedAt);\r",
							"    pm.expect(updatedAt >= createdAt).to.be.true;\r",
							"});\r",
							"\r",
							"// 11. European Robin specific validation\r",
							"pm.test(\"Log is for European Robin observation\", function () {\r",
							"    const log = pm.response.json();\r",
							"    \r",
							"    pm.expect(log.bird.name).to.equal(\"Pin-tailed Sandgrouse\");\r",
							"    pm.expect(log.bird.scientificName).to.equal(\"Pterocles alchata\");\r",
							"    pm.expect(log.bird.family.name).to.equal(\"Pteroclidae\"); \r",
							"});\r",
							"\r",
							"// 12. Region validation\r",
							"pm.test(\"Observation in Central Macedonia\", function () {\r",
							"    const log = pm.response.json();\r",
							"    pm.expect(log.region.name).to.equal(\"Central Macedonia\");\r",
							"});\r",
							"\r",
							"// 13. User validation\r",
							"pm.test(\"Observation by admin user\", function () {\r",
							"    const log = pm.response.json();\r",
							"    pm.expect(log.user.username).to.equal(\"admin\");\r",
							"    pm.expect(log.user.role).to.equal(\"ADMIN\");\r",
							"});\r",
							"\r",
							"// 14. Performance test\r",
							"pm.test(\"Response time under 2 seconds\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"});\r",
							"\r",
							"// 15. Store log data for potential future tests\r",
							"pm.test(\"Store log data for reference\", function () {\r",
							"    const log = pm.response.json();\r",
							"    \r",
							"    pm.environment.set(\"log_id\", log.id);\r",
							"    pm.environment.set(\"log_bird\", log.bird.name);\r",
							"    pm.environment.set(\"log_region\", log.region.name);\r",
							"    pm.environment.set(\"log_user\", log.user.username);\r",
							"    \r",
							"    console.log(`Log ${log.id}: ${log.bird.name} in ${log.region.name} by ${log.user.username}`);\r",
							"});\r",
							"\r",
							"// 16. Image URL validation\r",
							"pm.test(\"Bird image URL is valid\", function () {\r",
							"    const log = pm.response.json();\r",
							"    \r",
							"    if (log.bird.imageUrl && log.bird.imageUrl !== '') {\r",
							"        pm.expect(log.bird.imageUrl).to.match(/^https?:\\/\\//);\r",
							"        pm.expect(log.bird.imageUrl).to.include('wikimedia'); // Common source\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/bwlogs/5",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"bwlogs",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a log",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an object\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"const res = pm.response.json();\r",
							"\r",
							"// Root fields\r",
							"pm.test(\"Has correct root fields\", function () {\r",
							"    pm.expect(res).to.have.property(\"id\", 5);\r",
							"    pm.expect(res).to.have.property(\"quantity\", 1);\r",
							"    pm.expect(res).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
							"    pm.expect(res).to.have.property(\"updatedAt\").that.is.a(\"string\");\r",
							"});\r",
							"\r",
							"// Bird object\r",
							"pm.test(\"Bird object is valid\", function () {\r",
							"    pm.expect(res.bird).to.be.an(\"object\");\r",
							"    pm.expect(res.bird).to.have.property(\"id\").that.is.a(\"number\");\r",
							"    pm.expect(res.bird).to.have.property(\"name\", \"Pin-tailed Sandgrouse\");\r",
							"    pm.expect(res.bird).to.have.property(\"scientificName\", \"Pterocles alchata\");\r",
							"    pm.expect(res.bird.family).to.have.property(\"name\", \"Pteroclidae\");\r",
							"    pm.expect(res.bird).to.have.property(\"imageUrl\").that.is.a(\"string\");\r",
							"});\r",
							"\r",
							"// Region object\r",
							"pm.test(\"Region object is valid\", function () {\r",
							"    pm.expect(res.region).to.be.an(\"object\");\r",
							"    pm.expect(res.region).to.have.property(\"id\").that.is.a(\"number\");\r",
							"    pm.expect(res.region).to.have.property(\"name\", \"Central Macedonia\");\r",
							"});\r",
							"\r",
							"// User object\r",
							"pm.test(\"User object is valid\", function () {\r",
							"    pm.expect(res.user).to.be.an(\"object\");\r",
							"    pm.expect(res.user).to.have.property(\"id\").that.is.a(\"number\");\r",
							"    pm.expect(res.user).to.have.property(\"username\").that.is.a(\"string\");\r",
							"    pm.expect(res.user).to.have.property(\"email\").that.is.a(\"string\");\r",
							"    pm.expect(res.user).to.have.property(\"firstname\").that.is.a(\"string\");\r",
							"    pm.expect(res.user).to.have.property(\"lastname\").that.is.a(\"string\");\r",
							"    pm.expect(res.user).to.have.property(\"role\").that.is.a(\"string\");\r",
							"    pm.expect(res.user.profileDetails).to.have.property(\"dateOfBirth\").that.is.a(\"string\");\r",
							"    pm.expect(res.user.profileDetails).to.have.property(\"gender\").that.is.a(\"string\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"birdName\": \"Pin-tailed Sandgrouse\",\r\n    \"regionName\": \"Central Macedonia\",\r\n    \"quantity\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/bwlogs/5",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"bwlogs",
						"5"
					]
				}
			},
			"response": []
		},
		{
			"name": "filter my logs by bird & region",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ===== FILTERED BIRD WATCHING LOGS TESTS =====\r",
							"\r",
							"// 1. Basic response validation\r",
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has JSON content type\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"});\r",
							"\r",
							"// 2. Pagination structure validation (Spring Data format)\r",
							"pm.test(\"Response has Spring Data pagination structure\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.have.property('content');\r",
							"    pm.expect(responseData).to.have.property('pageable');\r",
							"    pm.expect(responseData).to.have.property('totalPages');\r",
							"    pm.expect(responseData).to.have.property('totalElements');\r",
							"    pm.expect(responseData).to.have.property('first');\r",
							"    pm.expect(responseData).to.have.property('last');\r",
							"    pm.expect(responseData).to.have.property('size');\r",
							"    pm.expect(responseData).to.have.property('number');\r",
							"    pm.expect(responseData).to.have.property('numberOfElements');\r",
							"    pm.expect(responseData).to.have.property('sort');\r",
							"});\r",
							"\r",
							"// 3. Filter validation - CRITICAL TEST\r",
							"pm.test(\"All results match birdName filter 'Sandgrouse'\", function () {\r",
							"    const logs = pm.response.json().content;\r",
							"    const requestData = JSON.parse(pm.request.body.raw);\r",
							"    \r",
							"    logs.forEach((log, index) => {\r",
							"        const matchesBirdName = log.bird.name.toLowerCase().includes(requestData.birdName.toLowerCase());\r",
							"        pm.expect(matchesBirdName, `Log ${log.id} bird \"${log.bird.name}\" should contain \"${requestData.birdName}\"`).to.be.true;\r",
							"    });\r",
							"});\r",
							"\r",
							"// 4. Content array validation\r",
							"pm.test(\"Content contains array of filtered logs\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.content).to.be.an('array');\r",
							"    pm.expect(responseData.content.length).to.be.greaterThan(0);\r",
							"    pm.expect(responseData.numberOfElements).to.equal(responseData.content.length);\r",
							"});\r",
							"\r",
							"// 5. Log object validation\r",
							"pm.test(\"Each log has required nested structure\", function () {\r",
							"    const logs = pm.response.json().content;\r",
							"    \r",
							"    logs.forEach((log, index) => {\r",
							"        pm.expect(log, `Log at index ${index}`).to.have.property('id');\r",
							"        pm.expect(log, `Log at index ${index}`).to.have.property('bird');\r",
							"        pm.expect(log, `Log at index ${index}`).to.have.property('quantity');\r",
							"        pm.expect(log, `Log at index ${index}`).to.have.property('region');\r",
							"        pm.expect(log, `Log at index ${index}`).to.have.property('user');\r",
							"        pm.expect(log, `Log at index ${index}`).to.have.property('createdAt');\r",
							"        pm.expect(log, `Log at index ${index}`).to.have.property('updatedAt');\r",
							"        \r",
							"        // Nested object validation\r",
							"        pm.expect(log.bird).to.have.property('name');\r",
							"        pm.expect(log.region).to.have.property('name');\r",
							"        pm.expect(log.user).to.have.property('username');\r",
							"    });\r",
							"});\r",
							"\r",
							"// 6. Pagination metadata validation\r",
							"pm.test(\"Pagination metadata is correct\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.totalElements).to.be.a('number').and.to.be.greaterThan(0);\r",
							"    pm.expect(responseData.totalPages).to.be.a('number').and.to.be.greaterThan(0);\r",
							"    pm.expect(responseData.size).to.be.a('number').and.to.be.greaterThan(0);\r",
							"    pm.expect(responseData.number).to.be.a('number').and.to.be.at.least(0);\r",
							"    pm.expect(responseData.numberOfElements).to.be.a('number').and.to.be.at.most(responseData.size);\r",
							"});\r",
							"\r",
							"// 7. Sandgrouse-specific validation\r",
							"pm.test(\"All results are sandgrouse observations\", function () {\r",
							"    const logs = pm.response.json().content;\r",
							"    \r",
							"    logs.forEach((log, index) => {\r",
							"        pm.expect(log.bird.name.toLowerCase(), `Log at index ${index}`).to.include(\"sandgrouse\");\r",
							"        pm.expect(log.bird.family.name, `Log at index ${index}`).to.equal(\"Pteroclidae\");\r",
							"    });\r",
							"});\r",
							"\r",
							"// 8. Quantity validation\r",
							"pm.test(\"Quantities are positive numbers\", function () {\r",
							"    const logs = pm.response.json().content;\r",
							"    \r",
							"    logs.forEach((log, index) => {\r",
							"        pm.expect(log.quantity, `Log at index ${index}`).to.be.a('number').and.to.be.greaterThan(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"// 9. Timestamp validation\r",
							"pm.test(\"Timestamps are valid and logical\", function () {\r",
							"    const logs = pm.response.json().content;\r",
							"    \r",
							"    logs.forEach((log, index) => {\r",
							"        pm.expect(new Date(log.createdAt).toString()).to.not.equal('Invalid Date');\r",
							"        pm.expect(new Date(log.updatedAt).toString()).to.not.equal('Invalid Date');\r",
							"        \r",
							"        // UpdatedAt should be equal or after createdAt\r",
							"        const createdAt = new Date(log.createdAt);\r",
							"        const updatedAt = new Date(log.updatedAt);\r",
							"        pm.expect(updatedAt >= createdAt, `Log ${log.id} updatedAt should be >= createdAt`).to.be.true;\r",
							"    });\r",
							"});\r",
							"\r",
							"// 10. User consistency validation\r",
							"pm.test(\"All logs belong to the same user (admin)\", function () {\r",
							"    const logs = pm.response.json().content;\r",
							"    const usernames = [...new Set(logs.map(log => log.user.username))];\r",
							"    \r",
							"    pm.expect(usernames.length).to.equal(1);\r",
							"    pm.expect(usernames[0]).to.equal(\"admin\");\r",
							"});\r",
							"\r",
							"// 11. Performance test\r",
							"pm.test(\"Filtered search response time under 3 seconds\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							"// 12. Store search results for reference\r",
							"pm.test(\"Store filtered search results\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.environment.set(\"filtered_logs_count\", responseData.totalElements);\r",
							"    pm.environment.set(\"filtered_bird_name\", \"Sandgrouse\");\r",
							"    \r",
							"    if (responseData.content.length > 0) {\r",
							"        const firstLog = responseData.content[0];\r",
							"        pm.environment.set(\"first_filtered_log_id\", firstLog.id);\r",
							"        pm.environment.set(\"first_filtered_bird\", firstLog.bird.name);\r",
							"    }\r",
							"    \r",
							"    console.log(`Found ${responseData.totalElements} sandgrouse observations`);\r",
							"});\r",
							"\r",
							"// 13. Empty region filter handling\r",
							"pm.test(\"Empty regionName filter was ignored (all regions included)\", function () {\r",
							"    const logs = pm.response.json().content;\r",
							"    const uniqueRegions = [...new Set(logs.map(log => log.region.name))];\r",
							"    \r",
							"    // Should have logs from multiple regions since region filter was empty\r",
							"    pm.expect(uniqueRegions.length).to.be.greaterThan(1);\r",
							"});\r",
							"\r",
							"// 14. Species variety validation\r",
							"pm.test(\"Multiple sandgrouse species found\", function () {\r",
							"    const logs = pm.response.json().content;\r",
							"    const uniqueSpecies = [...new Set(logs.map(log => log.bird.name))];\r",
							"    \r",
							"    pm.expect(uniqueSpecies.length).to.be.greaterThan(1);\r",
							"    console.log(\"Sandgrouse species found:\", uniqueSpecies);\r",
							"});\r",
							"\r",
							"// 15. Page navigation validation\r",
							"pm.test(\"Page navigation flags are correct\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.first).to.be.a('boolean');\r",
							"    pm.expect(responseData.last).to.be.a('boolean');\r",
							"    \r",
							"    // For single page results, both first and last should be true\r",
							"    if (responseData.totalPages === 1) {\r",
							"        pm.expect(responseData.first).to.be.true;\r",
							"        pm.expect(responseData.last).to.be.true;\r",
							"    }\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept-Charset",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"birdName\": \"Sandgrouse\",\r\n  \"regionName\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/bwlogs/my-logs/filtered",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"bwlogs",
						"my-logs",
						"filtered"
					]
				}
			},
			"response": []
		},
		{
			"name": "filter my logs by family",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ===== EMPTY FILTERED RESULTS TESTS =====\r",
							"\r",
							"// 1. Basic response validation\r",
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has JSON content type\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"});\r",
							"\r",
							"// 2. Empty results validation\r",
							"pm.test(\"Response indicates no results found\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.content).to.be.an('array');\r",
							"    pm.expect(responseData.content.length).to.equal(0);\r",
							"    pm.expect(responseData.empty).to.be.true;\r",
							"    pm.expect(responseData.totalElements).to.equal(0);\r",
							"    pm.expect(responseData.numberOfElements).to.equal(0);\r",
							"});\r",
							"\r",
							"// 3. Pagination structure validation (should still be present)\r",
							"pm.test(\"Pagination structure exists even with empty results\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.have.property('pageable');\r",
							"    pm.expect(responseData).to.have.property('totalPages');\r",
							"    pm.expect(responseData).to.have.property('totalElements');\r",
							"    pm.expect(responseData).to.have.property('first');\r",
							"    pm.expect(responseData).to.have.property('last');\r",
							"    pm.expect(responseData).to.have.property('size');\r",
							"    pm.expect(responseData).to.have.property('number');\r",
							"    pm.expect(responseData).to.have.property('numberOfElements');\r",
							"});\r",
							"\r",
							"// 4. Pagination metadata validation for empty results\r",
							"pm.test(\"Pagination metadata is correct for empty results\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.totalElements).to.equal(0);\r",
							"    pm.expect(responseData.totalPages).to.equal(0);\r",
							"    pm.expect(responseData.numberOfElements).to.equal(0);\r",
							"    pm.expect(responseData.size).to.equal(10); // Default page size\r",
							"    pm.expect(responseData.number).to.equal(0); // Page number\r",
							"});\r",
							"\r",
							"// 5. Page navigation flags for empty results\r",
							"pm.test(\"Page navigation flags are correct for empty results\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.first).to.be.true;\r",
							"    pm.expect(responseData.last).to.be.true;\r",
							"    pm.expect(responseData.empty).to.be.true;\r",
							"});\r",
							"\r",
							"// 6. Filter validation - no Muscicapidae observations found\r",
							"pm.test(\"No observations found for Muscicapidae family\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const requestData = JSON.parse(pm.request.body.raw);\r",
							"    \r",
							"    // This is expected - user has no observations of this bird family\r",
							"    pm.expect(responseData.totalElements).to.equal(0);\r",
							"    console.log(`No observations found for family: ${requestData.familyName}`);\r",
							"});\r",
							"\r",
							"// 7. Performance test (empty results should be fast)\r",
							"pm.test(\"Empty search response time under 1 second\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"// 8. Store empty result info for reference\r",
							"pm.test(\"Store empty search results info\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const requestData = JSON.parse(pm.request.body.raw);\r",
							"    \r",
							"    pm.environment.set(\"empty_search_family\", requestData.familyName);\r",
							"    pm.environment.set(\"empty_search_results\", responseData.totalElements);\r",
							"    \r",
							"    console.log(`No ${requestData.familyName} observations found in user's logs`);\r",
							"});\r",
							"\r",
							"// 9. Valid family name confirmation\r",
							"pm.test(\"Muscicapidae is a valid bird family\", function () {\r",
							"    const requestData = JSON.parse(pm.request.body.raw);\r",
							"    \r",
							"    // Muscicapidae is the family for Old World flycatchers (includes robins, nightingales, etc.)\r",
							"    const validFamilies = [\"Muscicapidae\", \"Anatidae\", \"Accipitridae\", \"Picidae\", \"Turdidae\", \"Pteroclidae\"];\r",
							"    pm.expect(validFamilies).to.include(requestData.familyName);\r",
							"    \r",
							"    console.log(`Valid family searched: ${requestData.familyName} (Old World flycatchers)`);\r",
							"});\r",
							"\r",
							"// 10. Response consistency test\r",
							"pm.test(\"Response structure consistent with empty Spring Data page\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    // All these should be true for an empty Spring Data page response\r",
							"    pm.expect(responseData.empty).to.be.true;\r",
							"    pm.expect(responseData.content.length).to.equal(0);\r",
							"    pm.expect(responseData.totalElements).to.equal(0);\r",
							"    pm.expect(responseData.numberOfElements).to.equal(0);\r",
							"    pm.expect(responseData.first).to.be.true;\r",
							"    pm.expect(responseData.last).to.be.true;\r",
							"});\r",
							"\r",
							"// 11. Sort information validation\r",
							"pm.test(\"Sort information is provided\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.sort).to.have.property('sorted');\r",
							"    pm.expect(responseData.sort).to.have.property('unsorted');\r",
							"    pm.expect(responseData.sort).to.have.property('empty');\r",
							"    pm.expect(responseData.pageable.sort).to.have.property('sorted');\r",
							"});\r",
							"\r",
							"// 12. Request body validation\r",
							"pm.test(\"Request body was processed correctly\", function () {\r",
							"    const requestData = JSON.parse(pm.request.body.raw);\r",
							"    \r",
							"    pm.expect(requestData).to.have.property('familyName');\r",
							"    pm.expect(requestData.familyName).to.equal('Muscicapidae');\r",
							"    pm.expect(requestData.familyName).to.be.a('string');\r",
							"});\r",
							"\r",
							"// 13. No error validation\r",
							"pm.test(\"Empty results are not an error condition\", function () {\r",
							"    // Empty results with 200 status is correct behavior, not an error\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"    pm.expect(pm.response.json()).to.not.have.property('error');\r",
							"    pm.expect(pm.response.json()).to.not.have.property('message');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"familyName\": \"Muscicapidae\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/bwlogs/my-logs/filtered",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"bwlogs",
						"my-logs",
						"filtered"
					]
				}
			},
			"response": []
		},
		{
			"name": "filter my logs by bird name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ===== EMPTY SWAN FILTER RESULTS TESTS =====\r",
							"\r",
							"// 1. Basic response validation\r",
							"pm.test(\"Status code is 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response has JSON content type\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
							"});\r",
							"\r",
							"// 2. Empty results validation\r",
							"pm.test(\"Response indicates no swan observations found\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.content).to.be.an('array');\r",
							"    pm.expect(responseData.content.length).to.equal(0);\r",
							"    pm.expect(responseData.empty).to.be.true;\r",
							"    pm.expect(responseData.totalElements).to.equal(0);\r",
							"    pm.expect(responseData.numberOfElements).to.equal(0);\r",
							"});\r",
							"\r",
							"// 3. Pagination structure validation\r",
							"pm.test(\"Pagination structure exists even with empty results\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.have.property('pageable');\r",
							"    pm.expect(responseData).to.have.property('totalPages');\r",
							"    pm.expect(responseData).to.have.property('totalElements');\r",
							"    pm.expect(responseData).to.have.property('first');\r",
							"    pm.expect(responseData).to.have.property('last');\r",
							"});\r",
							"\r",
							"// 4. Pagination metadata validation\r",
							"pm.test(\"Pagination metadata is correct for empty results\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.totalElements).to.equal(0);\r",
							"    pm.expect(responseData.totalPages).to.equal(0);\r",
							"    pm.expect(responseData.numberOfElements).to.equal(0);\r",
							"    pm.expect(responseData.size).to.equal(10);\r",
							"    pm.expect(responseData.number).to.equal(0);\r",
							"});\r",
							"\r",
							"// 5. Page navigation flags\r",
							"pm.test(\"Page navigation flags are correct for empty results\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.first).to.be.true;\r",
							"    pm.expect(responseData.last).to.be.true;\r",
							"    pm.expect(responseData.empty).to.be.true;\r",
							"});\r",
							"\r",
							"// 6. Filter validation - no swan observations found\r",
							"pm.test(\"No observations found for swans\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const requestData = JSON.parse(pm.request.body.raw);\r",
							"    \r",
							"    pm.expect(responseData.totalElements).to.equal(0);\r",
							"    console.log(`No observations found for: ${requestData.birdName}`);\r",
							"});\r",
							"\r",
							"// 7. Performance test\r",
							"pm.test(\"Empty swan search response time under 1 second\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"// 8. Store empty result info\r",
							"pm.test(\"Store empty swan search results info\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const requestData = JSON.parse(pm.request.body.raw);\r",
							"    \r",
							"    pm.environment.set(\"empty_search_bird\", requestData.birdName);\r",
							"    pm.environment.set(\"empty_search_results\", responseData.totalElements);\r",
							"    \r",
							"    console.log(`No ${requestData.birdName} observations found in user's logs`);\r",
							"});\r",
							"\r",
							"// 9. Valid bird name confirmation\r",
							"pm.test(\"Swan is a valid bird search term\", function () {\r",
							"    const requestData = JSON.parse(pm.request.body.raw);\r",
							"    \r",
							"    pm.expect(requestData.birdName).to.equal(\"Swan\");\r",
							"    pm.expect(requestData.birdName).to.be.a('string');\r",
							"    pm.expect(requestData.birdName.length).to.be.greaterThan(0);\r",
							"});\r",
							"\r",
							"// 10. Response consistency test\r",
							"pm.test(\"Response structure consistent with empty Spring Data page\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.empty).to.be.true;\r",
							"    pm.expect(responseData.content.length).to.equal(0);\r",
							"    pm.expect(responseData.totalElements).to.equal(0);\r",
							"    pm.expect(responseData.numberOfElements).to.equal(0);\r",
							"});\r",
							"\r",
							"// 11. No error validation\r",
							"pm.test(\"Empty results are not an error condition\", function () {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"    pm.expect(pm.response.json()).to.not.have.property('error');\r",
							"    pm.expect(pm.response.json()).to.not.have.property('message');\r",
							"});\r",
							"\r",
							"// 12. Case sensitivity note\r",
							"pm.test(\"Search is likely case insensitive\", function () {\r",
							"    const requestData = JSON.parse(pm.request.body.raw);\r",
							"    \r",
							"    // The search probably works case-insensitively\r",
							"    // \"Swan\" should match \"swan\", \"SWAN\", etc.\r",
							"    console.log(`Search performed for: \"${requestData.birdName}\" (case may be ignored)`);\r",
							"});\r",
							"\r",
							"// 13. Comparison with previous empty search\r",
							"pm.test(\"Consistent behavior across different empty searches\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    // Should have same structure as previous empty search\r",
							"    pm.expect(responseData.totalElements).to.equal(0);\r",
							"    pm.expect(responseData.totalPages).to.equal(0);\r",
							"    pm.expect(responseData.empty).to.be.true;\r",
							"});\r",
							"\r",
							"// 14. Request body validation\r",
							"pm.test(\"Request body was processed correctly\", function () {\r",
							"    const requestData = JSON.parse(pm.request.body.raw);\r",
							"    \r",
							"    pm.expect(requestData).to.have.property('birdName');\r",
							"    pm.expect(requestData.birdName).to.equal('Swan');\r",
							"    pm.expect(requestData.birdName).to.be.a('string');\r",
							"});\r",
							"\r",
							"// 15. Missing optional fields validation\r",
							"pm.test(\"No regionName filter was applied\", function () {\r",
							"    const requestData = JSON.parse(pm.request.body.raw);\r",
							"    \r",
							"    // Only birdName was specified, no region filter\r",
							"    pm.expect(requestData).to.not.have.property('regionName');\r",
							"    pm.expect(requestData).to.not.have.property('familyName');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"birdName\": \"Swan\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/bwlogs/my-logs/filtered",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"bwlogs",
						"my-logs",
						"filtered"
					]
				}
			},
			"response": []
		},
		{
			"name": "get my info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test 1: Check if response status code is 200 (OK)\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test 2: Verify response headers\r",
							"pm.test(\"Content-Type header is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"// Test 3: Response time is within acceptable limits\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"// Test 4: Response body contains JSON\r",
							"pm.test(\"Response body is valid JSON\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"});\r",
							"\r",
							"// Test 5: Verify the structure of the response\r",
							"pm.test(\"Response has the correct structure\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    // Check for required top-level fields\r",
							"    pm.expect(response).to.have.property(\"id\");\r",
							"    pm.expect(response).to.have.property(\"username\");\r",
							"    pm.expect(response).to.have.property(\"email\");\r",
							"    pm.expect(response).to.have.property(\"firstname\");\r",
							"    pm.expect(response).to.have.property(\"lastname\");\r",
							"    pm.expect(response).to.have.property(\"role\");\r",
							"    pm.expect(response).to.have.property(\"isActive\");\r",
							"    pm.expect(response).to.have.property(\"profileDetails\");\r",
							"    \r",
							"    // Check profileDetails structure\r",
							"    pm.expect(response.profileDetails).to.have.property(\"dateOfBirth\");\r",
							"    pm.expect(response.profileDetails).to.have.property(\"gender\");\r",
							"});\r",
							"\r",
							"// Test 6: Verify specific values in the response\r",
							"pm.test(\"Verify response values match expected data\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    pm.expect(response.id).to.eql(11);\r",
							"    pm.expect(response.username).to.eql(\"admin\");\r",
							"    pm.expect(response.email).to.eql(\"evaki@gmail.com\");\r",
							"    pm.expect(response.firstname).to.eql(\"Evangelia\");\r",
							"    pm.expect(response.lastname).to.eql(\"peristeri\");\r",
							"    pm.expect(response.role).to.eql(\"ADMIN\");\r",
							"    pm.expect(response.isActive).to.eql(true);\r",
							"    pm.expect(response.profileDetails.dateOfBirth).to.eql(\"1988-10-04\");\r",
							"    pm.expect(response.profileDetails.gender).to.eql(\"FEMALE\");\r",
							"});\r",
							"\r",
							"// Test 7: Data type validation\r",
							"pm.test(\"Data types are correct\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    pm.expect(response.id).to.be.a('number');\r",
							"    pm.expect(response.username).to.be.a('string');\r",
							"    pm.expect(response.email).to.be.a('string');\r",
							"    pm.expect(response.firstname).to.be.a('string');\r",
							"    pm.expect(response.lastname).to.be.a('string');\r",
							"    pm.expect(response.role).to.be.a('string');\r",
							"    pm.expect(response.isActive).to.be.a('boolean');\r",
							"    pm.expect(response.profileDetails.dateOfBirth).to.be.a('string');\r",
							"    pm.expect(response.profileDetails.gender).to.be.a('string');\r",
							"});\r",
							"\r",
							"// Test 8: Email format validation\r",
							"pm.test(\"Email is in valid format\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
							"    \r",
							"    pm.expect(emailRegex.test(response.email)).to.eql(true);\r",
							"});\r",
							"\r",
							"// Test 9: Date format validation (YYYY-MM-DD)\r",
							"pm.test(\"Date of birth is in correct format\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\r",
							"    \r",
							"    pm.expect(dateRegex.test(response.profileDetails.dateOfBirth)).to.eql(true);\r",
							"});\r",
							"\r",
							"// Test 10: Validate gender value is from expected set\r",
							"pm.test(\"Gender value is valid\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const validGenders = [\"MALE\", \"FEMALE\", \"OTHER\", \"PREFER_NOT_TO_SAY\"];\r",
							"    \r",
							"    pm.expect(validGenders).to.include(response.profileDetails.gender);\r",
							"});\r",
							"\r",
							"// Set environment variable for use in other requests\r",
							"const response = pm.response.json();\r",
							"pm.environment.set(\"user_id\", response.id);\r",
							"pm.environment.set(\"user_role\", response.role);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/my-info",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"my-info"
					]
				}
			},
			"response": []
		},
		{
			"name": "update my info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test 1: Check if response status code is 200 (OK)\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test 2: Verify response headers\r",
							"pm.test(\"Content-Type header is present and application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"// Test 3: Response time is within acceptable limits\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							"// Test 4: Response body contains JSON\r",
							"pm.test(\"Response body is valid JSON\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"});\r",
							"\r",
							"// Test 5: Verify the structure of the response\r",
							"pm.test(\"Response has the correct structure\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    // Check for required top-level fields\r",
							"    pm.expect(response).to.have.property(\"id\");\r",
							"    pm.expect(response).to.have.property(\"username\");\r",
							"    pm.expect(response).to.have.property(\"email\");\r",
							"    pm.expect(response).to.have.property(\"firstname\");\r",
							"    pm.expect(response).to.have.property(\"lastname\");\r",
							"    pm.expect(response).to.have.property(\"role\");\r",
							"    pm.expect(response).to.have.property(\"isActive\");\r",
							"    pm.expect(response).to.have.property(\"profileDetails\");\r",
							"    \r",
							"    // Check profileDetails structure\r",
							"    pm.expect(response.profileDetails).to.have.property(\"dateOfBirth\");\r",
							"    pm.expect(response.profileDetails).to.have.property(\"gender\");\r",
							"});\r",
							"\r",
							"// Test 6: Verify specific values in the response match request\r",
							"pm.test(\"Verify response values match request data\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const requestData = JSON.parse(pm.request.body.raw);\r",
							"    \r",
							"    pm.expect(response.firstname).to.eql(requestData.firstname);\r",
							"    pm.expect(response.lastname).to.eql(requestData.lastname);\r",
							"    pm.expect(response.email).to.eql(requestData.email);\r",
							"    pm.expect(response.profileDetails.dateOfBirth).to.eql(requestData.dateOfBirth);\r",
							"    pm.expect(response.profileDetails.gender).to.eql(requestData.gender);\r",
							"});\r",
							"\r",
							"// Test 7: Verify unchanged values\r",
							"pm.test(\"Verify unchanged values are preserved\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    pm.expect(response.id).to.eql(11);\r",
							"    pm.expect(response.username).to.eql(\"admin\");\r",
							"    pm.expect(response.role).to.eql(\"ADMIN\");\r",
							"    pm.expect(response.isActive).to.eql(true);\r",
							"});\r",
							"\r",
							"// Test 8: Data type validation\r",
							"pm.test(\"Data types are correct\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    pm.expect(response.id).to.be.a('number');\r",
							"    pm.expect(response.username).to.be.a('string');\r",
							"    pm.expect(response.email).to.be.a('string');\r",
							"    pm.expect(response.firstname).to.be.a('string');\r",
							"    pm.expect(response.lastname).to.be.a('string');\r",
							"    pm.expect(response.role).to.be.a('string');\r",
							"    pm.expect(response.isActive).to.be.a('boolean');\r",
							"    pm.expect(response.profileDetails.dateOfBirth).to.be.a('string');\r",
							"    pm.expect(response.profileDetails.gender).to.be.a('string');\r",
							"});\r",
							"\r",
							"// Test 9: Email format validation\r",
							"pm.test(\"Email is in valid format\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
							"    \r",
							"    pm.expect(emailRegex.test(response.email)).to.eql(true);\r",
							"});\r",
							"\r",
							"// Test 10: Date format validation (YYYY-MM-DD)\r",
							"pm.test(\"Date of birth is in correct format\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\r",
							"    \r",
							"    pm.expect(dateRegex.test(response.profileDetails.dateOfBirth)).to.eql(true);\r",
							"});\r",
							"\r",
							"// Test 11: Validate gender value is from expected set\r",
							"pm.test(\"Gender value is valid\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const validGenders = [\"MALE\", \"FEMALE\", \"OTHER\", \"PREFER_NOT_TO_SAY\"];\r",
							"    \r",
							"    pm.expect(validGenders).to.include(response.profileDetails.gender);\r",
							"});\r",
							"\r",
							"// Test 12: Verify profileDetails is properly nested\r",
							"pm.test(\"Profile details are correctly nested\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    pm.expect(response).to.have.nested.property('profileDetails.dateOfBirth');\r",
							"    pm.expect(response).to.have.nested.property('profileDetails.gender');\r",
							"    pm.expect(response.profileDetails).to.be.an('object');\r",
							"});\r",
							"\r",
							"// Set environment variables for use in other requests\r",
							"const response = pm.response.json();\r",
							"pm.environment.set(\"user_id\", response.id);\r",
							"pm.environment.set(\"user_email\", response.email);\r",
							"pm.environment.set(\"user_role\", response.role);\r",
							"\r",
							"// Output the response for debugging\r",
							"console.log(\"Full response:\", JSON.stringify(response, null, 2));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\": \"Eva\",\r\n    \"lastname\": \"Peristeri\",\r\n    \"email\": \"eva@gmail.com\",\r\n    \"dateOfBirth\": \"1988-10-04\",\r\n    \"gender\": \"FEMALE\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/update-user",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"update-user"
					]
				}
			},
			"response": []
		},
		{
			"name": "get stats for families",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test 1: Check if response status code is 200 (OK)\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test 2: Verify response headers\r",
							"pm.test(\"Content-Type header is present and application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"// Test 3: Response time is within acceptable limits\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							"// Test 4: Response body contains JSON\r",
							"pm.test(\"Response body is valid JSON\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"});\r",
							"\r",
							"// Test 5: Verify the structure of the response\r",
							"pm.test(\"Response has the correct structure\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    // Check for required top-level fields\r",
							"    pm.expect(response).to.have.property(\"totalFamilies\");\r",
							"    pm.expect(response).to.have.property(\"familiesWithMostSpecies\");\r",
							"    pm.expect(response).to.have.property(\"familiesWithMostObservations\");\r",
							"    \r",
							"    // Check that arrays are present and have items\r",
							"    pm.expect(response.familiesWithMostSpecies).to.be.an('array');\r",
							"    pm.expect(response.familiesWithMostObservations).to.be.an('array');\r",
							"    pm.expect(response.familiesWithMostSpecies.length).to.be.at.least(1);\r",
							"    pm.expect(response.familiesWithMostObservations.length).to.be.at.least(1);\r",
							"});\r",
							"\r",
							"// Test 6: Verify data types\r",
							"pm.test(\"Data types are correct\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    pm.expect(response.totalFamilies).to.be.a('number');\r",
							"    pm.expect(response.familiesWithMostSpecies).to.be.an('array');\r",
							"    pm.expect(response.familiesWithMostObservations).to.be.an('array');\r",
							"    \r",
							"    // Check structure of first item in familiesWithMostSpecies\r",
							"    if (response.familiesWithMostSpecies.length > 0) {\r",
							"        const family = response.familiesWithMostSpecies[0];\r",
							"        pm.expect(family).to.have.property(\"familyId\");\r",
							"        pm.expect(family).to.have.property(\"familyName\");\r",
							"        pm.expect(family).to.have.property(\"birdCount\");\r",
							"        pm.expect(family).to.have.property(\"observationCount\");\r",
							"        \r",
							"        pm.expect(family.familyId).to.be.a('number');\r",
							"        pm.expect(family.familyName).to.be.a('string');\r",
							"        pm.expect(family.birdCount).to.be.a('number');\r",
							"        pm.expect(family.observationCount).to.be.a('number');\r",
							"    }\r",
							"});\r",
							"\r",
							"// Test 7: Verify specific values in the response\r",
							"pm.test(\"Verify response values match expected data\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    // Check total families count\r",
							"    pm.expect(response.totalFamilies).to.eql(70);\r",
							"    \r",
							"    // Check familiesWithMostSpecies has expected top family\r",
							"    const topSpeciesFamily = response.familiesWithMostSpecies[0];\r",
							"    pm.expect(topSpeciesFamily.familyId).to.eql(26);\r",
							"    pm.expect(topSpeciesFamily.familyName).to.eql(\"Scolopacidae\");\r",
							"    pm.expect(topSpeciesFamily.birdCount).to.eql(39);\r",
							"    pm.expect(topSpeciesFamily.observationCount).to.eql(2);\r",
							"    \r",
							"    // Check familiesWithMostObservations has expected top family\r",
							"    const topObservationsFamily = response.familiesWithMostObservations[0];\r",
							"    pm.expect(topObservationsFamily.familyId).to.eql(6);\r",
							"    pm.expect(topObservationsFamily.familyName).to.eql(\"Pteroclidae\");\r",
							"    pm.expect(topObservationsFamily.birdCount).to.eql(3);\r",
							"    pm.expect(topObservationsFamily.observationCount).to.eql(6);\r",
							"});\r",
							"\r",
							"// Test 8: Verify arrays are sorted correctly\r",
							"pm.test(\"Families are sorted correctly\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    // Check familiesWithMostSpecies is sorted by birdCount descending\r",
							"    for (let i = 0; i < response.familiesWithMostSpecies.length - 1; i++) {\r",
							"        const current = response.familiesWithMostSpecies[i];\r",
							"        const next = response.familiesWithMostSpecies[i + 1];\r",
							"        pm.expect(current.birdCount).to.be.at.least(next.birdCount);\r",
							"    }\r",
							"    \r",
							"    // Check familiesWithMostObservations is sorted by observationCount descending\r",
							"    for (let i = 0; i < response.familiesWithMostObservations.length - 1; i++) {\r",
							"        const current = response.familiesWithMostObservations[i];\r",
							"        const next = response.familiesWithMostObservations[i + 1];\r",
							"        pm.expect(current.observationCount).to.be.at.least(next.observationCount);\r",
							"    }\r",
							"});\r",
							"\r",
							"// Test 9: Verify all family objects have required properties\r",
							"pm.test(\"All family objects have required properties\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    // Check all items in familiesWithMostSpecies\r",
							"    response.familiesWithMostSpecies.forEach(family => {\r",
							"        pm.expect(family).to.have.all.keys('familyId', 'familyName', 'birdCount', 'observationCount');\r",
							"    });\r",
							"    \r",
							"    // Check all items in familiesWithMostObservations\r",
							"    response.familiesWithMostObservations.forEach(family => {\r",
							"        pm.expect(family).to.have.all.keys('familyId', 'familyName', 'birdCount', 'observationCount');\r",
							"    });\r",
							"});\r",
							"\r",
							"// Test 10: Verify positive values for counts\r",
							"pm.test(\"All counts are positive numbers\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    pm.expect(response.totalFamilies).to.be.at.least(0);\r",
							"    \r",
							"    response.familiesWithMostSpecies.forEach(family => {\r",
							"        pm.expect(family.birdCount).to.be.at.least(0);\r",
							"        pm.expect(family.observationCount).to.be.at.least(0);\r",
							"    });\r",
							"    \r",
							"    response.familiesWithMostObservations.forEach(family => {\r",
							"        pm.expect(family.birdCount).to.be.at.least(0);\r",
							"        pm.expect(family.observationCount).to.be.at.least(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"// Set environment variables for use in other requests\r",
							"const response = pm.response.json();\r",
							"pm.environment.set(\"total_families\", response.totalFamilies);\r",
							"pm.environment.set(\"top_species_family\", response.familiesWithMostSpecies[0].familyName);\r",
							"pm.environment.set(\"top_observations_family\", response.familiesWithMostObservations[0].familyName);\r",
							"\r",
							"// Output the response for debugging\r",
							"console.log(\"Full response:\", JSON.stringify(response, null, 2));\r",
							"console.log(\"Response time: \" + pm.response.responseTime + \"ms\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{base_url}}/api/stats/families",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"stats",
						"families"
					]
				}
			},
			"response": []
		},
		{
			"name": "get stats for birds",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test 1: Check if response status code is 200 (OK)\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test 2: Verify response headers\r",
							"pm.test(\"Content-Type header is present and application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"// Test 3: Response time is within acceptable limits\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							"// Test 4: Response body contains JSON\r",
							"pm.test(\"Response body is valid JSON\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"});\r",
							"\r",
							"// Test 5: Verify the structure of the response\r",
							"pm.test(\"Response has the correct structure\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    // Check for required top-level fields\r",
							"    pm.expect(response).to.have.property(\"totalSpecies\");\r",
							"    pm.expect(response).to.have.property(\"totalObservations\");\r",
							"    pm.expect(response).to.have.property(\"totalFamilies\");\r",
							"    pm.expect(response).to.have.property(\"topFamilies\");\r",
							"    pm.expect(response).to.have.property(\"regionsWithMostObservations\");\r",
							"    \r",
							"    // Check that arrays are present\r",
							"    pm.expect(response.topFamilies).to.be.an('array');\r",
							"    pm.expect(response.regionsWithMostObservations).to.be.an('array');\r",
							"});\r",
							"\r",
							"// Test 6: Verify data types\r",
							"pm.test(\"Data types are correct\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    pm.expect(response.totalSpecies).to.be.a('number');\r",
							"    pm.expect(response.totalObservations).to.be.a('number');\r",
							"    pm.expect(response.totalFamilies).to.be.a('number');\r",
							"    pm.expect(response.topFamilies).to.be.an('array');\r",
							"    pm.expect(response.regionsWithMostObservations).to.be.an('array');\r",
							"    \r",
							"    // Check structure of first item in topFamilies\r",
							"    if (response.topFamilies.length > 0) {\r",
							"        const family = response.topFamilies[0];\r",
							"        pm.expect(family).to.have.property(\"familyId\");\r",
							"        pm.expect(family).to.have.property(\"familyName\");\r",
							"        pm.expect(family).to.have.property(\"birdCount\");\r",
							"        pm.expect(family).to.have.property(\"observationCount\");\r",
							"        \r",
							"        pm.expect(family.familyId).to.be.a('number');\r",
							"        pm.expect(family.familyName).to.be.a('string');\r",
							"        pm.expect(family.birdCount).to.be.a('number');\r",
							"        pm.expect(family.observationCount).to.be.a('number');\r",
							"    }\r",
							"    \r",
							"    // Check structure of first item in regionsWithMostObservations\r",
							"    if (response.regionsWithMostObservations.length > 0) {\r",
							"        const region = response.regionsWithMostObservations[0];\r",
							"        pm.expect(region).to.have.property(\"regionId\");\r",
							"        pm.expect(region).to.have.property(\"regionName\");\r",
							"        pm.expect(region).to.have.property(\"observationCount\");\r",
							"        \r",
							"        pm.expect(region.regionId).to.be.a('number');\r",
							"        pm.expect(region.regionName).to.be.a('string');\r",
							"        pm.expect(region.observationCount).to.be.a('number');\r",
							"    }\r",
							"});\r",
							"\r",
							"// Test 7: Verify specific values in the response\r",
							"pm.test(\"Verify response values match expected data\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    // Check total counts\r",
							"    pm.expect(response.totalSpecies).to.eql(459);\r",
							"    pm.expect(response.totalObservations).to.eql(37);\r",
							"    pm.expect(response.totalFamilies).to.eql(70);\r",
							"    \r",
							"    // Check topFamilies has expected top family\r",
							"    const topFamily = response.topFamilies[0];\r",
							"    pm.expect(topFamily.familyId).to.eql(6);\r",
							"    pm.expect(topFamily.familyName).to.eql(\"Pteroclidae\");\r",
							"    pm.expect(topFamily.birdCount).to.eql(3);\r",
							"    pm.expect(topFamily.observationCount).to.eql(6);\r",
							"    \r",
							"    // Check regionsWithMostObservations has expected top region\r",
							"    const topRegion = response.regionsWithMostObservations[0];\r",
							"    pm.expect(topRegion.regionId).to.eql(10);\r",
							"    pm.expect(topRegion.regionName).to.eql(\"Crete\");\r",
							"    pm.expect(topRegion.observationCount).to.eql(9);\r",
							"});\r",
							"\r",
							"// Test 8: Verify arrays are sorted correctly\r",
							"pm.test(\"Data is sorted correctly\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    // Check topFamilies is sorted by observationCount descending\r",
							"    for (let i = 0; i < response.topFamilies.length - 1; i++) {\r",
							"        const current = response.topFamilies[i];\r",
							"        const next = response.topFamilies[i + 1];\r",
							"        pm.expect(current.observationCount).to.be.at.least(next.observationCount);\r",
							"    }\r",
							"    \r",
							"    // Check regionsWithMostObservations is sorted by observationCount descending\r",
							"    for (let i = 0; i < response.regionsWithMostObservations.length - 1; i++) {\r",
							"        const current = response.regionsWithMostObservations[i];\r",
							"        const next = response.regionsWithMostObservations[i + 1];\r",
							"        pm.expect(current.observationCount).to.be.at.least(next.observationCount);\r",
							"    }\r",
							"});\r",
							"\r",
							"// Test 9: Verify all objects have required properties\r",
							"pm.test(\"All objects have required properties\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    // Check all items in topFamilies\r",
							"    response.topFamilies.forEach(family => {\r",
							"        pm.expect(family).to.have.all.keys('familyId', 'familyName', 'birdCount', 'observationCount');\r",
							"    });\r",
							"    \r",
							"    // Check all items in regionsWithMostObservations\r",
							"    response.regionsWithMostObservations.forEach(region => {\r",
							"        pm.expect(region).to.have.all.keys('regionId', 'regionName', 'observationCount');\r",
							"    });\r",
							"});\r",
							"\r",
							"// Test 10: Verify positive values for counts\r",
							"pm.test(\"All counts are positive numbers\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    pm.expect(response.totalSpecies).to.be.at.least(0);\r",
							"    pm.expect(response.totalObservations).to.be.at.least(0);\r",
							"    pm.expect(response.totalFamilies).to.be.at.least(0);\r",
							"    \r",
							"    response.topFamilies.forEach(family => {\r",
							"        pm.expect(family.birdCount).to.be.at.least(0);\r",
							"        pm.expect(family.observationCount).to.be.at.least(0);\r",
							"    });\r",
							"    \r",
							"    response.regionsWithMostObservations.forEach(region => {\r",
							"        pm.expect(region.observationCount).to.be.at.least(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"// Test 11: Verify array lengths\r",
							"pm.test(\"Arrays have expected number of items\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    pm.expect(response.topFamilies.length).to.eql(5);\r",
							"    pm.expect(response.regionsWithMostObservations.length).to.eql(3);\r",
							"});\r",
							"\r",
							"// Set environment variables for use in other requests\r",
							"const response = pm.response.json();\r",
							"pm.environment.set(\"total_species\", response.totalSpecies);\r",
							"pm.environment.set(\"total_observations\", response.totalObservations);\r",
							"pm.environment.set(\"total_families\", response.totalFamilies);\r",
							"pm.environment.set(\"top_family\", response.topFamilies[0].familyName);\r",
							"pm.environment.set(\"top_region\", response.regionsWithMostObservations[0].regionName);\r",
							"\r",
							"// Output the response for debugging\r",
							"console.log(\"Full response:\", JSON.stringify(response, null, 2));\r",
							"console.log(\"Response time: \" + pm.response.responseTime + \"ms\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{base_url}}/api/stats/birds",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"stats",
						"birds"
					]
				}
			},
			"response": []
		},
		{
			"name": "get stats for regions",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test 1: Check if response status code is 200 (OK)\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test 2: Verify response headers\r",
							"pm.test(\"Content-Type header is present and application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"// Test 3: Response time is within acceptable limits\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							"// Test 4: Response body contains JSON\r",
							"pm.test(\"Response body is valid JSON\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"});\r",
							"\r",
							"// Test 5: Verify the response is an array\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.be.an('array');\r",
							"});\r",
							"\r",
							"// Test 6: Verify array has expected number of items\r",
							"pm.test(\"Array has 3 regions\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response.length).to.eql(3);\r",
							"});\r",
							"\r",
							"// Test 7: Verify data types and structure for each region\r",
							"pm.test(\"All regions have correct structure and data types\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    response.forEach(region => {\r",
							"        pm.expect(region).to.have.property(\"regionId\");\r",
							"        pm.expect(region).to.have.property(\"regionName\");\r",
							"        pm.expect(region).to.have.property(\"observationCount\");\r",
							"        \r",
							"        pm.expect(region.regionId).to.be.a('number');\r",
							"        pm.expect(region.regionName).to.be.a('string');\r",
							"        pm.expect(region.observationCount).to.be.a('number');\r",
							"    });\r",
							"});\r",
							"\r",
							"// Test 8: Verify specific values in the response\r",
							"pm.test(\"Verify response values match expected data\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    // Check first region (Crete)\r",
							"    pm.expect(response[0].regionId).to.eql(10);\r",
							"    pm.expect(response[0].regionName).to.eql(\"Crete\");\r",
							"    pm.expect(response[0].observationCount).to.eql(9);\r",
							"    \r",
							"    // Check second region (Central Greece)\r",
							"    pm.expect(response[1].regionId).to.eql(13);\r",
							"    pm.expect(response[1].regionName).to.eql(\"Central Greece\");\r",
							"    pm.expect(response[1].observationCount).to.eql(8);\r",
							"    \r",
							"    // Check third region (Thessaly)\r",
							"    pm.expect(response[2].regionId).to.eql(7);\r",
							"    pm.expect(response[2].regionName).to.eql(\"Thessaly\");\r",
							"    pm.expect(response[2].observationCount).to.eql(4);\r",
							"});\r",
							"\r",
							"// Test 9: Verify regions are sorted by observationCount descending\r",
							"pm.test(\"Regions are sorted by observationCount descending\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    for (let i = 0; i < response.length - 1; i++) {\r",
							"        const current = response[i];\r",
							"        const next = response[i + 1];\r",
							"        pm.expect(current.observationCount).to.be.at.least(next.observationCount);\r",
							"    }\r",
							"});\r",
							"\r",
							"// Test 10: Verify all objects have only the required properties\r",
							"pm.test(\"All region objects have only required properties\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    response.forEach(region => {\r",
							"        pm.expect(region).to.have.all.keys('regionId', 'regionName', 'observationCount');\r",
							"    });\r",
							"});\r",
							"\r",
							"// Test 11: Verify positive values for counts and IDs\r",
							"pm.test(\"All counts and IDs are positive numbers\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    response.forEach(region => {\r",
							"        pm.expect(region.regionId).to.be.at.least(1);\r",
							"        pm.expect(region.observationCount).to.be.at.least(0);\r",
							"        pm.expect(region.regionName).to.have.lengthOf.at.least(1);\r",
							"    });\r",
							"});\r",
							"\r",
							"// Test 12: Verify region names are not empty\r",
							"pm.test(\"Region names are not empty\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    response.forEach(region => {\r",
							"        pm.expect(region.regionName).to.be.a('string').that.is.not.empty;\r",
							"    });\r",
							"});\r",
							"\r",
							"// Set environment variables for use in other requests\r",
							"const response = pm.response.json();\r",
							"pm.environment.set(\"top_region_id\", response[0].regionId);\r",
							"pm.environment.set(\"top_region_name\", response[0].regionName);\r",
							"pm.environment.set(\"top_region_observations\", response[0].observationCount);\r",
							"\r",
							"// Output the response for debugging\r",
							"console.log(\"Full response:\", JSON.stringify(response, null, 2));\r",
							"console.log(\"Response time: \" + pm.response.responseTime + \"ms\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{base_url}}/api/stats/regions",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"stats",
						"regions"
					]
				}
			},
			"response": []
		},
		{
			"name": "how many species in a family",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test 1: Check if response status code is 200 (OK)\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test 2: Verify response headers\r",
							"pm.test(\"Content-Type header is present and application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"// Test 3: Response time is within acceptable limits\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							"// Test 4: Response body contains JSON\r",
							"pm.test(\"Response body is valid JSON\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"});\r",
							"\r",
							"// Test 5: Verify the response is an object\r",
							"pm.test(\"Response is an object\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.be.an('object');\r",
							"    pm.expect(Array.isArray(response)).to.be.false;\r",
							"});\r",
							"\r",
							"// Test 6: Verify object has expected number of properties\r",
							"pm.test(\"Object has expected number of family entries\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const familyCount = Object.keys(response).length;\r",
							"    pm.expect(familyCount).to.eql(70); // Based on previous response showing 70 total families\r",
							"});\r",
							"\r",
							"// Test 7: Verify data types for all properties\r",
							"pm.test(\"All values are numbers\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    Object.values(response).forEach(speciesCount => {\r",
							"        pm.expect(speciesCount).to.be.a('number');\r",
							"    });\r",
							"});\r",
							"\r",
							"// Test 8: Verify all family names are strings\r",
							"pm.test(\"All family names are strings\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    Object.keys(response).forEach(familyName => {\r",
							"        pm.expect(familyName).to.be.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"// Test 9: Verify specific known values in the response\r",
							"pm.test(\"Verify specific family species counts\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    // Check some known values from the response\r",
							"    pm.expect(response.Scolopacidae).to.eql(39);\r",
							"    pm.expect(response.Anatidae).to.eql(35);\r",
							"    pm.expect(response.Muscicapidae).to.eql(29);\r",
							"    pm.expect(response.Laridae).to.eql(28);\r",
							"    pm.expect(response.Accipitridae).to.eql(27);\r",
							"    pm.expect(response.Charadriidae).to.eql(14);\r",
							"    \r",
							"    // Check some families with single species\r",
							"    pm.expect(response.Upupidae).to.eql(1);\r",
							"    pm.expect(response.Panuridae).to.eql(1);\r",
							"    pm.expect(response.Calcariidae).to.eql(1);\r",
							"    pm.expect(response.Haematopodidae).to.eql(1);\r",
							"});\r",
							"\r",
							"// Test 10: Verify all species counts are positive numbers\r",
							"pm.test(\"All species counts are positive numbers\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    Object.values(response).forEach(speciesCount => {\r",
							"        pm.expect(speciesCount).to.be.at.least(1); // At least 1 species per family\r",
							"        pm.expect(speciesCount).to.be.a('number');\r",
							"    });\r",
							"});\r",
							"\r",
							"// Test 11: Verify total species count matches expected sum\r",
							"pm.test(\"Total species count matches expected value\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const totalSpecies = Object.values(response).reduce((sum, count) => sum + count, 0);\r",
							"    \r",
							"    pm.expect(totalSpecies).to.eql(459); // Based on previous response showing 459 total species\r",
							"});\r",
							"\r",
							"// Test 12: Verify no empty or null family names\r",
							"pm.test(\"No empty family names\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    Object.keys(response).forEach(familyName => {\r",
							"        pm.expect(familyName).to.be.a('string').that.is.not.empty;\r",
							"        pm.expect(familyName).to.not.be.null;\r",
							"        pm.expect(familyName).to.not.be.undefined;\r",
							"    });\r",
							"});\r",
							"\r",
							"// Test 13: Verify family names follow expected naming convention\r",
							"pm.test(\"Family names follow biological naming convention\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    Object.keys(response).forEach(familyName => {\r",
							"        // Family names should start with capital letter and end with \"idae\"\r",
							"        pm.expect(familyName).to.match(/^[A-Z][a-zA-Z]*idae$/);\r",
							"    });\r",
							"});\r",
							"\r",
							"// Set environment variables for use in other requests\r",
							"const response = pm.response.json();\r",
							"pm.environment.set(\"total_species_count\", Object.values(response).reduce((sum, count) => sum + count, 0));\r",
							"pm.environment.set(\"family_with_most_species\", Object.keys(response).reduce((a, b) => response[a] > response[b] ? a : b));\r",
							"pm.environment.set(\"most_species_count\", response[pm.environment.get(\"family_with_most_species\")]);\r",
							"\r",
							"// Output the response for debugging\r",
							"console.log(\"Total species:\", Object.values(response).reduce((sum, count) => sum + count, 0));\r",
							"console.log(\"Family with most species:\", pm.environment.get(\"family_with_most_species\"), \"with\", pm.environment.get(\"most_species_count\"), \"species\");\r",
							"console.log(\"Response time: \" + pm.response.responseTime + \"ms\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{base_url}}/api/stats/species-distribution",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"stats",
						"species-distribution"
					]
				}
			},
			"response": []
		},
		{
			"name": "get stats for user logs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test 1: Check if response status code is 200 (OK)\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test 2: Verify response headers\r",
							"pm.test(\"Content-Type header is present and application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"// Test 3: Response time is within acceptable limits\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							"// Test 4: Response body contains JSON\r",
							"pm.test(\"Response body is valid JSON\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"});\r",
							"\r",
							"// Test 5: Verify the structure of the response\r",
							"pm.test(\"Response has the correct structure\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    // Check for required top-level fields\r",
							"    pm.expect(response).to.have.property(\"totalLogs\");\r",
							"    pm.expect(response).to.have.property(\"totalSpeciesObserved\");\r",
							"    pm.expect(response).to.have.property(\"totalRegionsVisited\");\r",
							"    pm.expect(response).to.have.property(\"mostSpottedBirds\");\r",
							"    \r",
							"    // Check that mostSpottedBirds is an array\r",
							"    pm.expect(response.mostSpottedBirds).to.be.an('array');\r",
							"});\r",
							"\r",
							"// Test 6: Verify data types\r",
							"pm.test(\"Data types are correct\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    pm.expect(response.totalLogs).to.be.a('number');\r",
							"    pm.expect(response.totalSpeciesObserved).to.be.a('number');\r",
							"    pm.expect(response.totalRegionsVisited).to.be.a('number');\r",
							"    pm.expect(response.mostSpottedBirds).to.be.an('array');\r",
							"    \r",
							"    // Check structure of first item in mostSpottedBirds\r",
							"    if (response.mostSpottedBirds.length > 0) {\r",
							"        const bird = response.mostSpottedBirds[0];\r",
							"        pm.expect(bird).to.have.property(\"birdId\");\r",
							"        pm.expect(bird).to.have.property(\"birdName\");\r",
							"        pm.expect(bird).to.have.property(\"observationCount\");\r",
							"        \r",
							"        pm.expect(bird.birdId).to.be.a('number');\r",
							"        pm.expect(bird.birdName).to.be.a('string');\r",
							"        pm.expect(bird.observationCount).to.be.a('number');\r",
							"    }\r",
							"});\r",
							"\r",
							"// Test 7: Verify specific values in the response\r",
							"pm.test(\"Verify response values match expected data\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    // Check total counts\r",
							"    pm.expect(response.totalLogs).to.eql(37);\r",
							"    pm.expect(response.totalSpeciesObserved).to.eql(29);\r",
							"    pm.expect(response.totalRegionsVisited).to.eql(11);\r",
							"    \r",
							"    // Check mostSpottedBirds has expected top bird\r",
							"    const topBird = response.mostSpottedBirds[0];\r",
							"    pm.expect(topBird.birdId).to.eql(59);\r",
							"    pm.expect(topBird.birdName).to.eql(\"Pallas's Sandgrouse\");\r",
							"    pm.expect(topBird.observationCount).to.eql(5);\r",
							"});\r",
							"\r",
							"// Test 8: Verify mostSpottedBirds is sorted by observationCount descending\r",
							"pm.test(\"Most spotted birds are sorted by observationCount descending\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    for (let i = 0; i < response.mostSpottedBirds.length - 1; i++) {\r",
							"        const current = response.mostSpottedBirds[i];\r",
							"        const next = response.mostSpottedBirds[i + 1];\r",
							"        pm.expect(current.observationCount).to.be.at.least(next.observationCount);\r",
							"    }\r",
							"});\r",
							"\r",
							"// Test 9: Verify all bird objects have required properties\r",
							"pm.test(\"All bird objects have required properties\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    response.mostSpottedBirds.forEach(bird => {\r",
							"        pm.expect(bird).to.have.all.keys('birdId', 'birdName', 'observationCount');\r",
							"    });\r",
							"});\r",
							"\r",
							"// Test 10: Verify positive values for counts and IDs\r",
							"pm.test(\"All counts and IDs are positive numbers\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    pm.expect(response.totalLogs).to.be.at.least(0);\r",
							"    pm.expect(response.totalSpeciesObserved).to.be.at.least(0);\r",
							"    pm.expect(response.totalRegionsVisited).to.be.at.least(0);\r",
							"    \r",
							"    response.mostSpottedBirds.forEach(bird => {\r",
							"        pm.expect(bird.birdId).to.be.at.least(1);\r",
							"        pm.expect(bird.observationCount).to.be.at.least(1); // At least 1 observation to be in this list\r",
							"    });\r",
							"});\r",
							"\r",
							"// Test 11: Verify bird names are not empty\r",
							"pm.test(\"Bird names are not empty\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    response.mostSpottedBirds.forEach(bird => {\r",
							"        pm.expect(bird.birdName).to.be.a('string').that.is.not.empty;\r",
							"    });\r",
							"});\r",
							"\r",
							"// Test 12: Verify array has expected number of items\r",
							"pm.test(\"Most spotted birds array has 5 items\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response.mostSpottedBirds.length).to.eql(5);\r",
							"});\r",
							"\r",
							"// Test 13: Verify observation counts are integers\r",
							"pm.test(\"Observation counts are integers\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    response.mostSpottedBirds.forEach(bird => {\r",
							"        pm.expect(bird.observationCount % 1).to.eql(0); // Check if it's an integer\r",
							"    });\r",
							"});\r",
							"\r",
							"// Set environment variables for use in other requests\r",
							"const response = pm.response.json();\r",
							"pm.environment.set(\"total_logs\", response.totalLogs);\r",
							"pm.environment.set(\"total_species_observed\", response.totalSpeciesObserved);\r",
							"pm.environment.set(\"total_regions_visited\", response.totalRegionsVisited);\r",
							"pm.environment.set(\"most_spotted_bird_id\", response.mostSpottedBirds[0].birdId);\r",
							"pm.environment.set(\"most_spotted_bird_name\", response.mostSpottedBirds[0].birdName);\r",
							"\r",
							"// Output the response for debugging\r",
							"console.log(\"Full response:\", JSON.stringify(response, null, 2));\r",
							"console.log(\"Response time: \" + pm.response.responseTime + \"ms\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/stats/user-logs",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"stats",
						"user-logs"
					]
				}
			},
			"response": []
		},
		{
			"name": "update any user (admin)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test 1: Check if response status code is 200 (OK)\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test 2: Verify response headers\r",
							"pm.test(\"Content-Type header is present and application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"// Test 3: Response time is within acceptable limits\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							"// Test 4: Response body contains JSON\r",
							"pm.test(\"Response body is valid JSON\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"});\r",
							"\r",
							"// Test 5: Verify the structure of the response\r",
							"pm.test(\"Response has the correct structure\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    // Check for required top-level fields\r",
							"    pm.expect(response).to.have.property(\"id\");\r",
							"    pm.expect(response).to.have.property(\"username\");\r",
							"    pm.expect(response).to.have.property(\"email\");\r",
							"    pm.expect(response).to.have.property(\"firstname\");\r",
							"    pm.expect(response).to.have.property(\"lastname\");\r",
							"    pm.expect(response).to.have.property(\"role\");\r",
							"    pm.expect(response).to.have.property(\"isActive\");\r",
							"    pm.expect(response).to.have.property(\"profileDetails\");\r",
							"    \r",
							"    // Check profileDetails structure\r",
							"    pm.expect(response.profileDetails).to.have.property(\"dateOfBirth\");\r",
							"    pm.expect(response.profileDetails).to.have.property(\"gender\");\r",
							"});\r",
							"\r",
							"// Test 6: Verify specific values in the response match request\r",
							"pm.test(\"Verify response values match request data\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const requestData = JSON.parse(pm.request.body.raw);\r",
							"    \r",
							"    pm.expect(response.firstname).to.eql(requestData.firstname);\r",
							"    pm.expect(response.lastname).to.eql(requestData.lastname);\r",
							"    pm.expect(response.email).to.eql(requestData.email);\r",
							"    pm.expect(response.isActive).to.eql(requestData.isActive);\r",
							"    pm.expect(response.profileDetails.dateOfBirth).to.eql(requestData.dateOfBirth);\r",
							"    pm.expect(response.profileDetails.gender).to.eql(requestData.gender);\r",
							"});\r",
							"\r",
							"// Test 7: Verify unchanged values\r",
							"pm.test(\"Verify unchanged values are preserved\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    pm.expect(response.id).to.eql(27);\r",
							"    pm.expect(response.username).to.eql(\"bob\");\r",
							"    pm.expect(response.role).to.eql(\"SPOTTER\");\r",
							"});\r",
							"\r",
							"// Test 8: Data type validation\r",
							"pm.test(\"Data types are correct\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    pm.expect(response.id).to.be.a('number');\r",
							"    pm.expect(response.username).to.be.a('string');\r",
							"    pm.expect(response.email).to.be.a('string');\r",
							"    pm.expect(response.firstname).to.be.a('string');\r",
							"    pm.expect(response.lastname).to.be.a('string');\r",
							"    pm.expect(response.role).to.be.a('string');\r",
							"    pm.expect(response.isActive).to.be.a('boolean');\r",
							"    pm.expect(response.profileDetails.dateOfBirth).to.be.a('string');\r",
							"    pm.expect(response.profileDetails.gender).to.be.a('string');\r",
							"});\r",
							"\r",
							"// Test 9: Email format validation\r",
							"pm.test(\"Email is in valid format\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r",
							"    \r",
							"    pm.expect(emailRegex.test(response.email)).to.eql(true);\r",
							"});\r",
							"\r",
							"// Test 10: Date format validation (YYYY-MM-DD)\r",
							"pm.test(\"Date of birth is in correct format\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\r",
							"    \r",
							"    pm.expect(dateRegex.test(response.profileDetails.dateOfBirth)).to.eql(true);\r",
							"});\r",
							"\r",
							"// Test 11: Validate gender value is from expected set\r",
							"pm.test(\"Gender value is valid\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const validGenders = [\"MALE\", \"FEMALE\", \"OTHER\", \"PREFER_NOT_TO_SAY\"];\r",
							"    \r",
							"    pm.expect(validGenders).to.include(response.profileDetails.gender);\r",
							"});\r",
							"\r",
							"// Test 12: Verify profileDetails is properly nested\r",
							"pm.test(\"Profile details are correctly nested\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    pm.expect(response).to.have.nested.property('profileDetails.dateOfBirth');\r",
							"    pm.expect(response).to.have.nested.property('profileDetails.gender');\r",
							"    pm.expect(response.profileDetails).to.be.an('object');\r",
							"});\r",
							"\r",
							"// Test 13: Validate role is from expected set\r",
							"pm.test(\"Role value is valid\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const validRoles = [\"SPOTTER\", \"ADMIN\", \"MODERATOR\"];\r",
							"    \r",
							"    pm.expect(validRoles).to.include(response.role);\r",
							"});\r",
							"\r",
							"// Set environment variables for use in other requests\r",
							"const response = pm.response.json();\r",
							"pm.environment.set(\"updated_user_id\", response.id);\r",
							"pm.environment.set(\"updated_user_email\", response.email);\r",
							"pm.environment.set(\"updated_user_role\", response.role);\r",
							"\r",
							"// Output the response for debugging\r",
							"console.log(\"Full response:\", JSON.stringify(response, null, 2));\r",
							"console.log(\"Request body:\", pm.request.body.raw);\r",
							"console.log(\"Response time: \" + pm.response.responseTime + \"ms\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"firstname\": \"Maria\",\r\n  \"lastname\": \"VonTrap\",\r\n  \"email\": \"maria@email.com\",\r\n  \"isActive\": true,\r\n  \"dateOfBirth\": \"1920-01-01\",\r\n  \"gender\": \"FEMALE\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/users/27",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"users",
						"27"
					]
				}
			},
			"response": []
		},
		{
			"name": "Family stats",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test 1: Check if response status code is 200 (OK)\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test 2: Verify response headers\r",
							"pm.test(\"Content-Type header is present and application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"// Test 3: Response time is within acceptable limits\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							"// Test 4: Response body contains JSON\r",
							"pm.test(\"Response body is valid JSON\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"});\r",
							"\r",
							"// Test 5: Verify the structure of the response\r",
							"pm.test(\"Response has the correct structure\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    // Check for required top-level fields\r",
							"    pm.expect(response).to.have.property(\"totalFamilies\");\r",
							"    pm.expect(response).to.have.property(\"familiesWithMostSpecies\");\r",
							"    pm.expect(response).to.have.property(\"familiesWithMostObservations\");\r",
							"    \r",
							"    // Check that arrays are present and have exactly 3 items each (due to topCount=3)\r",
							"    pm.expect(response.familiesWithMostSpecies).to.be.an('array');\r",
							"    pm.expect(response.familiesWithMostObservations).to.be.an('array');\r",
							"    pm.expect(response.familiesWithMostSpecies.length).to.eql(3);\r",
							"    pm.expect(response.familiesWithMostObservations.length).to.eql(3);\r",
							"});\r",
							"\r",
							"// Test 6: Verify data types\r",
							"pm.test(\"Data types are correct\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    pm.expect(response.totalFamilies).to.be.a('number');\r",
							"    pm.expect(response.familiesWithMostSpecies).to.be.an('array');\r",
							"    pm.expect(response.familiesWithMostObservations).to.be.an('array');\r",
							"    \r",
							"    // Check structure of first item in familiesWithMostSpecies\r",
							"    if (response.familiesWithMostSpecies.length > 0) {\r",
							"        const family = response.familiesWithMostSpecies[0];\r",
							"        pm.expect(family).to.have.property(\"familyId\");\r",
							"        pm.expect(family).to.have.property(\"familyName\");\r",
							"        pm.expect(family).to.have.property(\"birdCount\");\r",
							"        pm.expect(family).to.have.property(\"observationCount\");\r",
							"        \r",
							"        pm.expect(family.familyId).to.be.a('number');\r",
							"        pm.expect(family.familyName).to.be.a('string');\r",
							"        pm.expect(family.birdCount).to.be.a('number');\r",
							"        pm.expect(family.observationCount).to.be.a('number');\r",
							"    }\r",
							"});\r",
							"\r",
							"// Test 7: Verify specific values in the response\r",
							"pm.test(\"Verify response values match expected data\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    // Check total families count\r",
							"    pm.expect(response.totalFamilies).to.eql(70);\r",
							"    \r",
							"    // Check familiesWithMostSpecies has expected top families\r",
							"    const topSpeciesFamilies = response.familiesWithMostSpecies;\r",
							"    pm.expect(topSpeciesFamilies[0].familyId).to.eql(26);\r",
							"    pm.expect(topSpeciesFamilies[0].familyName).to.eql(\"Scolopacidae\");\r",
							"    pm.expect(topSpeciesFamilies[0].birdCount).to.eql(39);\r",
							"    pm.expect(topSpeciesFamilies[0].observationCount).to.eql(2);\r",
							"    \r",
							"    pm.expect(topSpeciesFamilies[1].familyId).to.eql(2);\r",
							"    pm.expect(topSpeciesFamilies[1].familyName).to.eql(\"Anatidae\");\r",
							"    pm.expect(topSpeciesFamilies[1].birdCount).to.eql(35);\r",
							"    pm.expect(topSpeciesFamilies[1].observationCount).to.eql(1);\r",
							"    \r",
							"    pm.expect(topSpeciesFamilies[2].familyId).to.eql(62);\r",
							"    pm.expect(topSpeciesFamilies[2].familyName).to.eql(\"Muscicapidae\");\r",
							"    pm.expect(topSpeciesFamilies[2].birdCount).to.eql(29);\r",
							"    pm.expect(topSpeciesFamilies[2].observationCount).to.eql(0);\r",
							"    \r",
							"    // Check familiesWithMostObservations has expected top families\r",
							"    const topObservationsFamilies = response.familiesWithMostObservations;\r",
							"    pm.expect(topObservationsFamilies[0].familyId).to.eql(6);\r",
							"    pm.expect(topObservationsFamilies[0].familyName).to.eql(\"Pteroclidae\");\r",
							"    pm.expect(topObservationsFamilies[0].birdCount).to.eql(3);\r",
							"    pm.expect(topObservationsFamilies[0].observationCount).to.eql(6);\r",
							"    \r",
							"    pm.expect(topObservationsFamilies[1].familyId).to.eql(33);\r",
							"    pm.expect(topObservationsFamilies[1].familyName).to.eql(\"Accipitridae\");\r",
							"    pm.expect(topObservationsFamilies[1].birdCount).to.eql(27);\r",
							"    pm.expect(topObservationsFamilies[1].observationCount).to.eql(5);\r",
							"    \r",
							"    pm.expect(topObservationsFamilies[2].familyId).to.eql(49);\r",
							"    pm.expect(topObservationsFamilies[2].familyName).to.eql(\"Acrocephalidae\");\r",
							"    pm.expect(topObservationsFamilies[2].birdCount).to.eql(13);\r",
							"    pm.expect(topObservationsFamilies[2].observationCount).to.eql(4);\r",
							"});\r",
							"\r",
							"// Test 8: Verify arrays are sorted correctly\r",
							"pm.test(\"Families are sorted correctly\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    // Check familiesWithMostSpecies is sorted by birdCount descending\r",
							"    for (let i = 0; i < response.familiesWithMostSpecies.length - 1; i++) {\r",
							"        const current = response.familiesWithMostSpecies[i];\r",
							"        const next = response.familiesWithMostSpecies[i + 1];\r",
							"        pm.expect(current.birdCount).to.be.at.least(next.birdCount);\r",
							"    }\r",
							"    \r",
							"    // Check familiesWithMostObservations is sorted by observationCount descending\r",
							"    for (let i = 0; i < response.familiesWithMostObservations.length - 1; i++) {\r",
							"        const current = response.familiesWithMostObservations[i];\r",
							"        const next = response.familiesWithMostObservations[i + 1];\r",
							"        pm.expect(current.observationCount).to.be.at.least(next.observationCount);\r",
							"    }\r",
							"});\r",
							"\r",
							"// Test 9: Verify all family objects have required properties\r",
							"pm.test(\"All family objects have required properties\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    // Check all items in familiesWithMostSpecies\r",
							"    response.familiesWithMostSpecies.forEach(family => {\r",
							"        pm.expect(family).to.have.all.keys('familyId', 'familyName', 'birdCount', 'observationCount');\r",
							"    });\r",
							"    \r",
							"    // Check all items in familiesWithMostObservations\r",
							"    response.familiesWithMostObservations.forEach(family => {\r",
							"        pm.expect(family).to.have.all.keys('familyId', 'familyName', 'birdCount', 'observationCount');\r",
							"    });\r",
							"});\r",
							"\r",
							"// Test 10: Verify positive values for counts\r",
							"pm.test(\"All counts are positive numbers\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    pm.expect(response.totalFamilies).to.be.at.least(0);\r",
							"    \r",
							"    response.familiesWithMostSpecies.forEach(family => {\r",
							"        pm.expect(family.birdCount).to.be.at.least(0);\r",
							"        pm.expect(family.observationCount).to.be.at.least(0);\r",
							"    });\r",
							"    \r",
							"    response.familiesWithMostObservations.forEach(family => {\r",
							"        pm.expect(family.birdCount).to.be.at.least(0);\r",
							"        pm.expect(family.observationCount).to.be.at.least(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"// Test 11: Verify query parameter effect (topCount=3)\r",
							"pm.test(\"Query parameter topCount=3 limits results to 3 items\", function () {\r",
							"    const response = pm.response.json();\r",
							"    \r",
							"    pm.expect(response.familiesWithMostSpecies.length).to.eql(3);\r",
							"    pm.expect(response.familiesWithMostObservations.length).to.eql(3);\r",
							"});\r",
							"\r",
							"// Set environment variables for use in other requests\r",
							"const response = pm.response.json();\r",
							"pm.environment.set(\"total_families\", response.totalFamilies);\r",
							"pm.environment.set(\"top_species_family\", response.familiesWithMostSpecies[0].familyName);\r",
							"pm.environment.set(\"top_observations_family\", response.familiesWithMostObservations[0].familyName);\r",
							"\r",
							"// Output the response for debugging\r",
							"console.log(\"Full response:\", JSON.stringify(response, null, 2));\r",
							"console.log(\"Request URL:\", pm.request.url.toString());\r",
							"console.log(\"Response time: \" + pm.response.responseTime + \"ms\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/api/stats/families?topCount=3",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"stats",
						"families"
					],
					"query": [
						{
							"key": "topCount",
							"value": "3"
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "default"
		}
	]
}

